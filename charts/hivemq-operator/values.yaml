global:
  rbac:
    create: true
    # Create a PodSecurityPolicy, cluster role, role binding and service account for the HiveMQ pods and assign the service account to them.
    pspEnabled: true
    # Enable additional (unsafe) sysctls in the PSP to enhance performance for large deployments.
    # Make sure to refer to https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ to enable them first, or the HiveMQ Pods will fail to launch. See https://www.hivemq.com/docs/hivemq/latest/user-guide/system-requirements.html for the full list of sysctl parameters and their effects.
    # Also make sure to adjust hivemq.controllerTemplate to use the cluster-deployment-unsafe-sysctls.yaml, which will set the sysctls for the deployments.
    advancedSysctls: false
    pspAnnotations: {}
    allowedCapabilities: []
    # Image pull secrets for operator, hivemq or other images.
    imagePullSecrets: []
    # - name: hivemq-pull-secret
operator:
  # Deploy a custom resource based on the hivemq section below. Set to false if you want to create a HiveMQCluster object yourself.
  # By setting this to false, the operator will not start a HiveMQ cluster when deployed.
  deployCr: true
  image: hivemq/hivemq-operator:4.4.3
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  logLevel: INFO
  # Let the operator verify all HiveMQCluster objects before accepting them.
  # Not using the validation hook can result in erroneous cluster configurations which are hard to debug.
  admissionWebhooks:
    # Enable the admission hook
    enabled: true
    # Reject updates to the CR when the admission hook fails
    failurePolicy: Fail
    ## If enabled, generate a self-signed certificate, then patch the webhook configurations with the generated data.
    ## On chart upgrades (or if the secret exists) the cert will not be re-generated. You can use this to provide your own
    ## certs ahead of time if you wish.
    patch:
      enabled: true
      image:
        repository: jettech/kube-webhook-certgen
        tag: v1.5.1
        sha: ""
        pullPolicy: IfNotPresent
      resources: {}
      ## Provide a priority class name to the webhook patching job
      ##
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
  # Set this string to a name of a externally managed ConfigMap containing the templates for the operator if you want to customize them.
  templateConfigMap: ""
  resources:
    limits:
      cpu: 800m
      memory: 512M
    requests:
      cpu: 200m
      memory: 512M
monitoring:
  # Deploy ServiceMonitor for Prometheus Operator and enable Prometheus
  enabled: false
  # Deploy a dedicated instance of the prometheus operator, including grafana, as sub-chart
  dedicated: false
hivemq:
  # Annotations to apply to the service account
  serviceAccountAnnotations: {}
  # The values below apply to the HiveMQCluster object. If you are using deployCr: false, this is unused.
  image: hivemq/hivemq4:k8s-4.4.3
  imagePullPolicy: IfNotPresent
  nodeCount: "3"
  cpu: "4"
  memory: "4Gi"
  ephemeralStorage: "15Gi"
  # This is only used if global.rbac.create is set to false.
  serviceAccountName: hivemq
  # Base64 encoded license. (NOTE: use a ConfigMap when mounting multiple files)
  license: ""
  env: []
  ## Add custom environment variables (e.g. for your extension) here.
  # - name: MY_CUSTOM_ENV
  #   value: some-value
  initialization: []
  ## Add custom initContainers here. Busybox is the default image. and /bin/sh -c the default command
  # - name: init-cfg
  #   image: busybox
  #   command:
  #   - /bin/sh
  #   - "-c"
  #   args:
  #   - |
  #     echo "mycustomfile" >> /hivemq-data/conf/test.cfg
  sidecars: []
  ## Add custom sidecar containers here. Must be a Container object in the regular Kubernetes API.
  #- |
  #  name: fluent-logging-example
  #  args: -i tail -p path=/mnt/log/*.log -o stdout
  #  image: fluent/fluent-bit:1.5
  #  resources:
  #    limits:
  #      cpu: 100m
  #      memory: 200Mi
  #  volumeMounts:
  #    - name: log
  #      readOnly: true
  #      mountPath: /mnt/log
  extensions:
    - # Default platform extensions starting from 4.4.0. Add a configMap and enable them if you want to use either
      name: hivemq-kafka-extension
      extensionUri: preinstalled
      enabled: false
    - name: hivemq-bridge-extension
      extensionUri: preinstalled
      enabled: false
    - name: hivemq-enterprise-security-extension
      extensionUri: preinstalled
      enabled: false
      # Note that this is just an example initialization routine. Make sure this points to the current JDBC version you require for your configuration.
      initialization: |
        # A little hack because k8s configMaps can't handle sub-directories
        [[ -e /conf-override/extensions/hivemq-enterprise-security-extension/enterprise-security-extension.xml ]] &&
        rm -f $(pwd)/conf/enterprise-security-extension.xml &&
        cp -s /conf-override/extensions/hivemq-enterprise-security-extension/enterprise-security-extension.xml $(pwd)/conf/enterprise-security-extension.xml

        [[ ! -f drivers/postgres-jdbc.jar ]] &&
        curl -L https://jdbc.postgresql.org/download/postgresql-42.2.14.jar --output drivers/jdbc/postgres.jar
  ## Feel free to add other extensions as well. You should keep the blocks above to maintain control over the platform extensions though.
  #- name: hivemq-mqtt-message-log-extension
  #  extensionUri: https://www.hivemq.com/releases/extensions/hivemq-mqtt-message-log-extension-1.1.0.zip
  #  configMap: message-log-config
  configMaps: []
  # ConfigMaps to mount to the HiveMQ pods. These can be mounted to existing directories without shadowing the folder contents as well.
  #- name: hivemq-license
  #  path: /opt/hivemq/license
  secrets: {}
  # Secrets to mount to the HiveMQ pods. These can be mounted to existing directories without shadowing the folder contents as well.
  #- name: hivemq-license
  #  path: /opt/hivemq/license
  cpuLimitRatio: "2"
  memoryLimitRatio: "1"
  ephemeralStorageLimitRatio: "1"
  affinity: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        # Try not to co-locate with nodes from the same cluster
        - weight: 60
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hivemq-cluster
                  operator: In
                  values:
                    - {{ spec.name }}
            topologyKey: "kubernetes.io/hostname"
        # Try not to co-locate with other HiveMQ clusters
        - weight: 30
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - hivemq
            topologyKey: "kubernetes.io/hostname"
  listenerConfiguration: |
    <tcp-listener>
        <port>${HIVEMQ_MQTT_PORT}</port>
        <bind-address>0.0.0.0</bind-address>
    </tcp-listener>
  restApiConfiguration: |
    <rest-api>
        <enabled>${HIVEMQ_REST_API_ENABLED}</enabled>
        <listeners>
            <http>
                <port>${HIVEMQ_REST_API_PORT}</port>
                <bind-address>0.0.0.0</bind-address>
            </http>
        </listeners>
    </rest-api>
  restrictions:
    noConnectIdleTimeout: 10000
    maxClientIdLength: 65535
    maxTopicLength: 65535
    incomingBandwidthThrottling: 0
    maxConnections: -1
  security:
    topicFormatValidation: true
    allowRequestProblemInformation: true
    allowEmptyClientId: true
    payloadFormatValidation: false
  logLevel: "INFO"
  # The ports can be edited or expanded upon, but the MQTT port must be the first one.
  ports:
    - name: "mqtt"
      port: 1883
      expose: true
      patch:
        - '[{"op":"add","path":"/spec/selector/hivemq.com~1node-offline","value":"false"},{"op":"add","path":"/metadata/annotations","value":{"service.spec.externalTrafficPolicy":"Local"}}]'
        # If you want Kubernetes to expose the MQTT port to external traffic
        # - '[{"op":"add","path":"/spec/type","value":"LoadBalancer"}]'
    - name: "cc"
      port: 8080
      expose: true
      patch:
        - '[{"op":"add","path":"/spec/sessionAffinity","value":"ClientIP"}]'
        # If you want Kubernetes to expose the HiveMQ control center via load balancer.
        # Warning: You should consider configuring proper security and TLS beforehand. Ingress may be a better option here.
        # - '[{"op":"add","path":"/spec/type","value":"LoadBalancer"}]'
  # To enable the HiveMQ REST API and expose it as a service. Be aware of the security risks of exposing the REST API
  # - name: "api"
  #   port: 8888
  #   expose: true
  #   patch:
  #     - '[{"op":"add","path":"/spec/sessionAffinity","value":"ClientIP"}]'

  clusterOverloadProtection: "true"
  mqtt:
    sharedSubscriptionEnabled: true
    queuedMessageStrategy: "discard"
    subscriptionIdentifierEnabled: true
    keepaliveAllowUnlimited: true
    retainedMessagesEnabled: true
    topicAliasMaxPerClient: 5
    maxPacketSize: 268435460
    topicAliasEnabled: true
    serverReceiveMaximum: 10
    keepaliveMax: 65535
    wildcardSubscriptionEnabled: true
    queuedMessagesMaxQueueSize: 1000
    sessionExpiryInterval: 4294967295
    maxQos: 2
  javaOptions: "-XX:+UnlockExperimentalVMOptions -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=50 -XX:MinRAMPercentage=30"
  clusterReplicaCount: "2"
  controllerTemplate: cluster-deployment.yaml
  configOverride: |
    <?xml version="1.0"?>
    <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:noNamespaceSchemaLocation="hivemq-config.xsd">
        <listeners>
            --LISTENER-CONFIGURATION--
        </listeners>
        <control-center>
            <listeners>
                <http>
                    <port>${HIVEMQ_CONTROL_CENTER_PORT}</port>
                    <bind-address>0.0.0.0</bind-address>
                </http>
            </listeners>
            <users>
                <user>
                    <name>${HIVEMQ_CONTROL_CENTER_USER}</name>
                    <password>${HIVEMQ_CONTROL_CENTER_PASSWORD}</password>
                </user>
            </users>
        </control-center>
        <!--REST-API-CONFIGURATION-->
        <cluster>
            <enabled>true</enabled>
            <transport>
                <udp>
                    <bind-address>${HIVEMQ_BIND_ADDRESS}</bind-address>
                    <bind-port>${HIVEMQ_CLUSTER_PORT}</bind-port>
                    <multicast-enabled>false</multicast-enabled>
                    <enabled>true</enabled>
                </udp>
            </transport>
            <discovery>
                <extension>
                    <reload-interval>${HIVEMQ_DNS_DISCOVERY_INTERVAL}</reload-interval>
                </extension>
            </discovery>

            <replication>
                <replica-count>${HIVEMQ_CLUSTER_REPLICA_COUNT}</replica-count>
            </replication>

            <overload-protection>
                <enabled>${HIVEMQ_CLUSTER_OVERLOAD_PROTECTION}</enabled>
            </overload-protection>

            <failure-detection>
                <tcp-health-check>
                    <enabled>true</enabled>
                    <bind-address>${HIVEMQ_BIND_ADDRESS}</bind-address>
                    <bind-port>9000</bind-port>
                    <port-range>50</port-range>
                </tcp-health-check>

                <heartbeat>
                    <enabled>true</enabled>
                    <interval>4000</interval>
                    <timeout>30000</timeout>
                </heartbeat>
            </failure-detection>

        </cluster>
        <restrictions>
            <max-client-id-length>${HIVEMQ_MAX_CLIENT_ID_LENGTH}</max-client-id-length>
            <max-topic-length>${HIVEMQ_MAX_TOPIC_LENGTH}</max-topic-length>
            <max-connections>-${HIVEMQ_MAX_CONNECTIONS}</max-connections>
            <incoming-bandwidth-throttling>${HIVEMQ_INCOMING_BANDWIDTH_THROTTLING}</incoming-bandwidth-throttling>
            <no-connect-idle-timeout>${HIVEMQ_NO_CONNECT_IDLE_TIMEOUT}</no-connect-idle-timeout>
        </restrictions>
        <mqtt>
            <session-expiry>
                <max-interval>${HIVEMQ_SESSION_EXPIRY_INTERVAL}</max-interval>
            </session-expiry>

            <packets>
                <max-packet-size>${HIVEMQ_MAX_PACKET_SIZE}</max-packet-size>
            </packets>

            <receive-maximum>
                <server-receive-maximum>${HIVEMQ_SERVER_RECEIVE_MAXIMUM}</server-receive-maximum>
            </receive-maximum>

            <keep-alive>
                <max-keep-alive>${HIVEMQ_KEEPALIVE_MAX}</max-keep-alive>
                <allow-unlimited>${HIVEMQ_KEEPALIVE_ALLOW_UNLIMITED}</allow-unlimited>
            </keep-alive>

            <topic-alias>
                <enabled>${HIVEMQ_TOPIC_ALIAS_ENABLED}</enabled>
                <max-per-client>${HIVEMQ_TOPIC_ALIAS_MAX_PER_CLIENT}</max-per-client>
            </topic-alias>

            <subscription-identifier>
                <enabled>${HIVEMQ_SUBSCRIPTION_IDENTIFIER_ENABLED}</enabled>
            </subscription-identifier>

            <wildcard-subscriptions>
                <enabled>${HIVEMQ_WILDCARD_SUBSCRIPTION_ENABLED}</enabled>
            </wildcard-subscriptions>

            <shared-subscriptions>
                <enabled>${HIVEMQ_SHARED_SUBSCRIPTION_ENABLED}</enabled>
            </shared-subscriptions>

            <quality-of-service>
                <max-qos>${HIVEMQ_MAX_QOS}</max-qos>
            </quality-of-service>

            <retained-messages>
                <enabled>${HIVEMQ_RETAINED_MESSAGES_ENABLED}</enabled>
            </retained-messages>

            <queued-messages>
                <max-queue-size>${HIVEMQ_QUEUED_MESSAGE_MAX_QUEUE_SIZE}</max-queue-size>
                <strategy>${HIVEMQ_QUEUED_MESSAGE_STRATEGY}</strategy>
            </queued-messages>
        </mqtt>
        <security>
            <!-- Allows the use of empty client ids -->
            <allow-empty-client-id>
                <enabled>${HIVEMQ_ALLOW_EMPTY_CLIENT_ID}</enabled>
            </allow-empty-client-id>

            <!-- Configures validation for UTF-8 PUBLISH payloads -->
            <payload-format-validation>
                <enabled>${HIVEMQ_PAYLOAD_FORMAT_VALIDATION}</enabled>
            </payload-format-validation>

            <utf8-validation>
                <enabled>${HIVEMQ_TOPIC_FORMAT_VALIDATION}</enabled>
            </utf8-validation>

            <!-- Allows clients to request problem information -->
            <allow-request-problem-information>
                <enabled>${HIVEMQ_ALLOW_REQUEST_PROBLEM_INFORMATION}</enabled>
            </allow-request-problem-information>
        </security>
    </hivemq>
nameOverride: ""
namespaceOverride: ""
fullnameOverride: ""
