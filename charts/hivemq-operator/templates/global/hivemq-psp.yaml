{{- if and .Values.global.rbac.create .Values.global.rbac.pspEnabled }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: "{{ template "hivemq.fullname" . }}"
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "hivemq.labels" . | nindent 4 }}
  {{- if .Values.global.rbac.pspAnnotations }}
  annotations:
  {{ toYaml .Values.global.rbac.pspAnnotations | indent 4 }}
  {{- end }}
spec:
  privileged: false
  # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #requiredDropCapabilities:
  #  - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  {{- if .Values.global.rbac.advancedSysctls }}
  allowedUnsafeSysctls:
    - fs.file-max
    - net.ipv4.tcp_fin_timeout
    - net.ipv4.tcp_tw_recycle
    - net.ipv4.tcp_tw_reuse
    - net.core.rmem_default
    - net.core.wmem_default
    - net.core.rmem_max
    - net.core.wmem_max
    - net.ipv4.tcp_rmem
    - net.ipv4.tcp_wmem
  {{- end }}
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  readOnlyRootFilesystem: false
  {{- if .Values.global.rbac.allowedCapabilities }}
  allowedCapabilities:
  {{ toYaml .Values.global.rbac.allowedCapabilities | indent 4 }}
  {{- end }}
  {{- end }}