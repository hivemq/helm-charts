{{- if .Values.config.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hivemq-platform.configuration-name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hivemq-platform.labels" . | nindent 4 }}
data:
  # noinspection XmlPathReference
  config.xml: |-
    {{- if .Values.config.overrideHiveMQConfig -}}
    {{ .Values.config.overrideHiveMQConfig | nindent 3}}
    {{- else }}
    <?xml version="1.0"?>
    <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
      {{- $hastMqtt := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "mqtt") }}
      {{- $hasWebsocket := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "websocket") }}
      {{- if or $hastMqtt $hasWebsocket }}
      <listeners>
      {{- range $key, $val := .Values.services }}
        {{- if and (eq $val.type "mqtt") $val.exposed }}
        {{- if $val.keystoreSecretName }}
        <tls-tcp-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <tls>
            <keystore>
              <path>/tls-{{ $val.keystoreSecretName }}/{{ $val.keystoreSecretKey | default "keystore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</password>
              <private-key-password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</private-key-password>
            </keystore>
            {{- if $val.truststoreSecretName }}
            <truststore>
              <path>/tls-{{ $val.truststoreSecretName }}/{{ $val.truststoreSecretKey | default "truststore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.truststoreSecretName "truststore_pass" }}</password>
            </truststore>
            {{- end}}
            {{- if $val.tlsClientAuthenticationMode}}
            <client-authentication-mode>{{ $val.tlsClientAuthenticationMode }}</client-authentication-mode>
            {{- end}}
          </tls>
        </tls-tcp-listener>
        {{- else }}
        <tcp-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
        </tcp-listener>
        {{- end }}
        {{- else if and (eq $val.type "websocket") $val.exposed }}
        {{- if $val.keystoreSecretName }}
        <tls-websocket-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <path>/mqtt</path>
          <tls>
            <keystore>
              <path>/tls-{{ $val.keystoreSecretName }}/{{ $val.keystoreSecretKey | default "keystore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</password>
              <private-key-password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</private-key-password>
            </keystore>
            {{- if $val.truststoreSecretName }}
            <truststore>
              <path>/tls-{{ $val.truststoreSecretName }}/{{ $val.truststoreSecretKey | default "truststore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.truststoreSecretName "truststore_pass" }}</password>
            </truststore>
            {{- end}}
            {{- if $val.tlsClientAuthenticationMode}}
            <client-authentication-mode>{{ $val.tlsClientAuthenticationMode }}</client-authentication-mode>
            {{- end}}
          </tls>
        </tls-websocket-listener>
        {{- else }}
        <websocket-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <path>/mqtt</path>
        </websocket-listener>
        {{- end }}
        {{- end }}
      {{- end }}
      </listeners>
      {{- end }}
      <cluster>
        <transport>
          <tcp>
            <bind-address>0.0.0.0</bind-address>
            <bind-port>7000</bind-port>
          </tcp>
        </transport>
        <enabled>true</enabled>
        <discovery>
          <extension/>
        </discovery>
      </cluster>
      <!-- required and should not be configured different -->
      <health-api>
        <enabled>true</enabled>
        <listeners>
          <http>
            <port>8889</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
        </listeners>
      </health-api>
      {{- $hasControlCenter := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "control-center") }}
      {{- if $hasControlCenter }}
      <control-center>
        <listeners>
        {{- range $key, $val := .Values.services }}
          {{- if and (eq $val.type "control-center") $val.exposed }}
          {{- if (hasKey $val "keystoreSecretName") }}
          <https>
            <port>{{ $val.containerPort }}</port>
            <bind-address>0.0.0.0</bind-address>
            <tls>
              <keystore>
                <path>/tls-{{ $val.keystoreSecretName }}/{{ $val.keystoreSecretKey | default "keystore" }}</path>
                <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</password>
                <private-key-password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</private-key-password>
              </keystore>
            </tls>
          </https>
          {{- else }}
          <http>
            <port>{{ $val.containerPort }}</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
          {{- end }}
          {{- end }}
        {{- end }}
        </listeners>
        {{- if and .Values.controlCenter.username .Values.controlCenter.password }}
        <users>
          <user>
            <name>{{ .Values.controlCenter.username | trim }}</name>
            <password>{{ .Values.controlCenter.password | trim }}</password>
          </user>
        </users>
        {{- end }}
      </control-center>
      {{- end }}
      {{- $hasRestApi := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "rest-api") }}
      {{- if $hasRestApi }}
      <rest-api>
        <enabled>true</enabled>
        <auth>
          <enabled>{{ printf "%t" .Values.restApi.authEnabled | default false }}</enabled>
        </auth>
        {{- range $key, $val := .Values.services }}
        {{- if eq $val.type "rest-api" }}
        <listeners>
          <http>
            <port>{{ $val.containerPort }}</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
        </listeners>
        {{- end }}
        {{- end }}
      </rest-api>
      {{- end }}
      {{- if and .Values.config.dataHub (or .Values.config.dataHub.behaviorValidationEnabled .Values.config.dataHub.dataValidationEnabled) }}
      <data-hub>
        {{- if .Values.config.dataHub.dataValidationEnabled }}
        <data-validation>
          <enabled>true</enabled>
        </data-validation>
        {{- end }}
        {{- if .Values.config.dataHub.behaviorValidationEnabled }}
        <behavior-validation>
          <enabled>true</enabled>
        </behavior-validation>
        {{- end }}
      </data-hub>
      {{- end }}
      {{- $restrictionsConfig := .Values.hivemqRestrictions }}
      {{- $hasRestrictionsConfig := include "hivemq-platform.has-hivemq-restrictions-config" (dict "hivemqRestrictions" $restrictionsConfig) }}
      {{- if $hasRestrictionsConfig }}
      <restrictions>
        {{- if (hasKey $restrictionsConfig "maxConnections") }}
        <max-connections>{{ $restrictionsConfig.maxConnections | int64 }}</max-connections>
        {{- end -}}
        {{- if (hasKey $restrictionsConfig "incomingBandwidthThrottling") }}
        <incoming-bandwidth-throttling>{{ $restrictionsConfig.incomingBandwidthThrottling | int64 }}</incoming-bandwidth-throttling>
        {{- end -}}
        {{- if (hasKey $restrictionsConfig "noConnectIdleTimeout") }}
        <no-connect-idle-timeout>{{ $restrictionsConfig.noConnectIdleTimeout | int64 }}</no-connect-idle-timeout>
        {{- end -}}
        {{- if (hasKey $restrictionsConfig "maxClientIdLength") }}
        <max-client-id-length>{{ $restrictionsConfig.maxClientIdLength }}</max-client-id-length>
        {{- end }}
      </restrictions>
      {{- end }}
      {{- $mqttConfig := .Values.hivemqMqtt }}
      {{- $hasMqttConfig := include "hivemq-platform.has-hivemq-mqtt-config" (dict "hivemqMqtt" $mqttConfig) }}
      {{- if $hasMqttConfig }}
      <mqtt>
        {{- if (hasKey $mqttConfig "sessionExpiryMaxInterval") }}
        <session-expiry>
          <max-interval>{{ $mqttConfig.sessionExpiryMaxInterval | int64 }}</max-interval>
        </session-expiry>
        {{- end }}
        {{- if (hasKey $mqttConfig "messageExpiryMaxInterval") }}
        <message-expiry>
          <max-interval>{{ $mqttConfig.messageExpiryMaxInterval | int64 }}</max-interval>
        </message-expiry>
        {{- end }}
        {{- if (hasKey $mqttConfig "maxPacketSize") }}
        <packets>
          <max-packet-size>{{ $mqttConfig.maxPacketSize | int64 }}</max-packet-size>
        </packets>
        {{- end }}
        {{- if (hasKey $mqttConfig "serverReceiveMaximum") }}
        <receive-maximum>
          <server-receive-maximum>{{ $mqttConfig.serverReceiveMaximum }}</server-receive-maximum>
        </receive-maximum>
        {{- end }}
        {{- if or (hasKey $mqttConfig "keepAliveMax") (hasKey $mqttConfig "keepAliveAllowUnlimited") }}
        <keep-alive>
          {{- if (hasKey $mqttConfig "keepAliveMax") }}
          <max-keep-alive>{{ $mqttConfig.keepAliveMax }}</max-keep-alive>
          {{- end }}
          {{- if (hasKey $mqttConfig "keepAliveAllowUnlimited") }}
          <allow-unlimited>{{ printf "%t" $mqttConfig.keepAliveAllowUnlimited }}</allow-unlimited>
          {{- end }}
        </keep-alive>
        {{- end }}
        {{- if or (hasKey $mqttConfig "topicAliasEnabled") (hasKey $mqttConfig "topicAliasMaxPerClient") }}
        <topic-alias>
          {{- if (hasKey $mqttConfig "topicAliasEnabled") }}
          <enabled>{{ printf "%t" $mqttConfig.topicAliasEnabled }}</enabled>
          {{- end }}
          {{- if (hasKey $mqttConfig "topicAliasMaxPerClient") }}
          <max-per-client>{{ $mqttConfig.topicAliasMaxPerClient }}</max-per-client>
          {{- end }}
        </topic-alias>
        {{- end }}
        {{- if (hasKey $mqttConfig "subscriptionIdentifier") }}
        <subscription-identifier>
          <enabled>{{ printf "%t" $mqttConfig.subscriptionIdentifier }}</enabled>
        </subscription-identifier>
        {{- end }}
        {{- if (hasKey $mqttConfig "wildcardSubscriptions") }}
        <wildcard-subscriptions>
          <enabled>{{ printf "%t" $mqttConfig.wildcardSubscriptions }}</enabled>
        </wildcard-subscriptions>
        {{- end }}
        {{- if (hasKey $mqttConfig "sharedSubscriptions") }}
        <shared-subscriptions>
          <enabled>{{ printf "%t" $mqttConfig.sharedSubscriptions }}</enabled>
        </shared-subscriptions>
        {{- end }}
        {{- if (hasKey $mqttConfig "maxQualityOfService") }}
        <quality-of-service>
          <max-qos>{{ $mqttConfig.maxQualityOfService }}</max-qos>
        </quality-of-service>
        {{- end }}
        {{- if (hasKey $mqttConfig "retainedMessages") }}
        <retained-messages>
          <enabled>{{ printf "%t" $mqttConfig.retainedMessages }}</enabled>
        </retained-messages>
        {{- end }}
        {{- if or (hasKey $mqttConfig "queuedMessagesMaxSize") (hasKey $mqttConfig "queuedMessagesStrategy") }}
        <queued-messages>
          {{- if (hasKey $mqttConfig "queuedMessagesMaxSize") }}
          <max-queue-size>{{ $mqttConfig.queuedMessagesMaxSize | int64 }}</max-queue-size>
          {{- end }}
          {{- if (hasKey $mqttConfig "queuedMessagesStrategy") }}
          <strategy>{{ $mqttConfig.queuedMessagesStrategy }}</strategy>
          {{- end }}
        </queued-messages>
        {{- end }}
      </mqtt>
      {{- end }}
      {{- $mqttAddonsConfig := .Values.hivemqMqttAddons }}
      {{- $hasMqttAddonsConfig := include "hivemq-platform.has-hivemq-mqtt-addons-config" (dict "hivemqMqttAddons" $mqttAddonsConfig) }}
      {{- if $hasMqttAddonsConfig }}
      <mqtt-addons>
        {{- if (hasKey $mqttAddonsConfig "expiredMessagesTopic") }}
        <expired-messages-topic>
          <enabled>{{ printf "%t" $mqttAddonsConfig.expiredMessagesTopic }}</enabled>
        </expired-messages-topic>
        {{- end }}
        {{- if (hasKey $mqttAddonsConfig "droppedMessagesTopic") }}
        <dropped-messages-topic>
          <enabled>{{ printf "%t" $mqttAddonsConfig.droppedMessagesTopic }}</enabled>
        </dropped-messages-topic>
        {{- end }}
        {{- if (hasKey $mqttAddonsConfig "deadMessagesTopic") }}
        <dead-messages-topic>
          <enabled>{{ printf "%t" $mqttAddonsConfig.deadMessagesTopic }}</enabled>
        </dead-messages-topic>
        {{- end }}
      </mqtt-addons>
      {{- end }}
      {{- $securityConfig := .Values.hivemqMqttSecurity }}
      {{- $hasMqttSecurityConfig := include "hivemq-platform.has-hivemq-mqtt-security-config" (dict "hivemqMqttSecurity" $securityConfig) }}
      {{- if $hasMqttSecurityConfig }}
      <security>
        {{- if (hasKey $securityConfig "allowEmptyClientId") }}
        <allow-empty-client-id>
          <enabled>{{ printf "%t" $securityConfig.allowEmptyClientId }}</enabled>
        </allow-empty-client-id>
        {{- end }}
        {{- if (hasKey $securityConfig "payloadFormatValidation") }}
        <payload-format-validation>
          <enabled>{{ printf "%t" $securityConfig.payloadFormatValidation }}</enabled>
        </payload-format-validation>
        {{- end }}
        {{- if (hasKey $securityConfig "utf8Validation") }}
        <utf8-validation>
          <enabled>{{ printf "%t" $securityConfig.utf8Validation }}</enabled>
        </utf8-validation> 
        {{- end }}
        {{- if (hasKey $securityConfig "allowRequestProblemInformation") }}
        <allow-request-problem-information>
          <enabled>{{ printf "%t" $securityConfig.allowRequestProblemInformation }}</enabled>
        </allow-request-problem-information>
        {{- end }}
        {{- if (hasKey $securityConfig "controlCenterAuditLog") }}
        <control-center-audit-log>
          <enabled>{{ printf "%t" $securityConfig.controlCenterAuditLog }}</enabled>
        </control-center-audit-log>
        {{- end }}
      </security>
      {{- end }}
    </hivemq>
  tracing.xml: |-
    <?xml version="1.0" encoding="UTF-8" ?>
    <tracing xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="tracing.xsd">
      <context-propagation>
        <outbound-context-propagation>
          <enabled>false</enabled>
        </outbound-context-propagation>
      </context-propagation>
      <sampling>
        <publish-sampling>
          <enabled>true</enabled>
        </publish-sampling>
      </sampling>
    </tracing>
    {{- end -}}
{{- end }}
