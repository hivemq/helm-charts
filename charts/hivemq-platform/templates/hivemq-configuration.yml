{{- if .Values.config.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hivemq-platform.configuration-name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hivemq-platform.labels" . | nindent 4 }}
data:
  # noinspection XmlPathReference
  config.xml: |-
    {{- if .Values.config.overrideHiveMQConfig -}}
    {{ .Values.config.overrideHiveMQConfig | nindent 3}}
    {{- else }}
    <?xml version="1.0"?>
    <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
      {{- $hastMqtt := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "mqtt") }}
      {{- $hasWebsocket := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "websocket") }}
      {{- if or $hastMqtt $hasWebsocket }}
      <listeners>
      {{- range $key, $val := .Values.services }}
        {{- if and (eq $val.type "mqtt") $val.exposed }}
        {{- if $val.keystoreSecretName }}
        <tls-tcp-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <tls>
            <keystore>
              <path>/tls-{{ $val.keystoreSecretName }}/{{ $val.keystoreSecretKey | default "keystore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</password>
              <private-key-password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</private-key-password>
            </keystore>
            {{- if $val.truststoreSecretName }}
            <truststore>
              <path>/tls-{{ $val.truststoreSecretName }}/{{ $val.truststoreSecretKey | default "truststore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.truststoreSecretName "truststore_pass" }}</password>
            </truststore>
            {{- end}}
            {{- if $val.tlsClientAuthenticationMode}}
            <client-authentication-mode>{{ $val.tlsClientAuthenticationMode }}</client-authentication-mode>
            {{- end}}
          </tls>
        </tls-tcp-listener>
        {{- else }}
        <tcp-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
        </tcp-listener>
        {{- end }}
        {{- else if and (eq $val.type "websocket") $val.exposed }}
        {{- if $val.keystoreSecretName }}
        <tls-websocket-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <path>/mqtt</path>
          <tls>
            <keystore>
              <path>/tls-{{ $val.keystoreSecretName }}/{{ $val.keystoreSecretKey | default "keystore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</password>
              <private-key-password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.keystoreSecretName "keystore_pass" }}</private-key-password>
            </keystore>
            {{- if $val.truststoreSecretName }}
            <truststore>
              <path>/tls-{{ $val.truststoreSecretName }}/{{ $val.truststoreSecretKey | default "truststore" }}</path>
              <password>{{ printf "${%s_%s_%s_%s}" $val.type $.Release.Name $val.truststoreSecretName "truststore_pass" }}</password>
            </truststore>
            {{- end}}
            {{- if $val.tlsClientAuthenticationMode}}
            <client-authentication-mode>{{ $val.tlsClientAuthenticationMode }}</client-authentication-mode>
            {{- end}}
          </tls>
        </tls-websocket-listener>
        {{- else }}
        <websocket-listener>
          <port>{{ $val.containerPort }}</port>
          <bind-address>0.0.0.0</bind-address>
          <path>/mqtt</path>
        </websocket-listener>
        {{- end }}
        {{- end }}
      {{- end }}
      </listeners>
      {{- end }}
      <cluster>
        <transport>
          <tcp>
            <bind-address>0.0.0.0</bind-address>
            <bind-port>7000</bind-port>
          </tcp>
        </transport>
        <enabled>true</enabled>
        <discovery>
          <extension/>
        </discovery>
      </cluster>
      <!-- required and should not be configured different -->
      <health-api>
        <enabled>true</enabled>
        <listeners>
          <http>
            <port>8889</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
        </listeners>
      </health-api>
      {{- $hasControlCenter := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "control-center") }}
      {{- if $hasControlCenter }}
      <control-center>
        <listeners>
        {{- range $key, $val := .Values.services }}
          {{- if eq $val.type "control-center" }}
          <http>
            <port>{{ $val.containerPort }}</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
          {{- end }}
        {{- end }}
        </listeners>
        {{- if and .Values.controlCenter.username .Values.controlCenter.password }}
        <users>
          <user>
            <name>{{ .Values.controlCenter.username | trim }}</name>
            <password>{{ .Values.controlCenter.password | trim }}</password>
          </user>
        </users>
        {{- end }}
      </control-center>
      {{- end }}
      {{- $hasRestApi := include "hivemq-platform.has-service-type" (dict "services" .Values.services "expectedType" "rest-api") }}
      {{- if $hasRestApi }}
      <rest-api>
        <enabled>true</enabled>
        <auth>
          <enabled>{{ printf "%t" .Values.restApi.authEnabled | default false }}</enabled>
        </auth>
        {{- range $key, $val := .Values.services }}
        {{- if eq $val.type "rest-api" }}
        <listeners>
          <http>
            <port>{{ $val.containerPort }}</port>
            <bind-address>0.0.0.0</bind-address>
          </http>
        </listeners>
        {{- end }}
        {{- end }}
      </rest-api>
      {{- end }}
      <anonymous-usage-statistics>
        <enabled>false</enabled>
      </anonymous-usage-statistics>
      {{- if and .Values.config.dataHub (or .Values.config.dataHub.behaviorValidationEnabled .Values.config.dataHub.dataValidationEnabled) }}
      <data-hub>
        {{- if .Values.config.dataHub.dataValidationEnabled }}
        <data-validation>
          <enabled>true</enabled>
        </data-validation>
        {{- end }}
        {{- if .Values.config.dataHub.behaviorValidationEnabled }}
        <behavior-validation>
          <enabled>true</enabled>
        </behavior-validation>
        {{- end }}
      </data-hub>
      {{- end }}
      {{- if .Values.hivemqRestrictions }}
      <restrictions>
        <max-connections>{{ .Values.hivemqRestrictions.maxConnections | default -1 | int64 }}</max-connections>
        <incoming-bandwidth-throttling>{{ .Values.hivemqRestrictions.incomingBandwidthThrottling | default 0 | int64 }}</incoming-bandwidth-throttling>
        <no-connect-idle-timeout>{{ .Values.hivemqRestrictions.noConnectIdleTimeout | default 1000 | int64 }}</no-connect-idle-timeout>
        <max-client-id-length>{{ .Values.hivemqRestrictions.maxClientIdLength | default 65535 }}</max-client-id-length>
      </restrictions>
      {{- end }}
      {{- if .Values.hivemqMqtt }}
      <mqtt>
        <session-expiry>
          <max-interval>{{ .Values.hivemqMqtt.sessionExpiryMaxInterval | default 4294967295 | int64 }}</max-interval>
        </session-expiry>
        <message-expiry>
          <max-interval>{{ .Values.hivemqMqtt.messageExpiryMaxInterval | default 4294967296 | int64 }}</max-interval>
        </message-expiry>
        <packets>
          <max-packet-size>{{ .Values.hivemqMqtt.maxPacketSize | default 268435460 | int64 }}</max-packet-size>
        </packets>
        <receive-maximum>
          <server-receive-maximum>{{ .Values.hivemqMqtt.serverReceiveMaximum | default 10 }}</server-receive-maximum>
        </receive-maximum>
        <keep-alive>
          <max-keep-alive>{{ .Values.hivemqMqtt.keepAliveMax | default 65535 }}</max-keep-alive>
          <allow-unlimited>{{ printf "%t" .Values.hivemqMqtt.keepAliveAllowUnlimited | default true }}</allow-unlimited>
        </keep-alive>
        <topic-alias>
          <enabled>{{ printf "%t" .Values.hivemqMqtt.topicAliasEnabled | default true }}</enabled>
          <max-per-client>{{ .Values.hivemqMqtt.topicAliasMaxPerClient | default 5 }}</max-per-client>
        </topic-alias>
        <subscription-identifier>
          <enabled>{{ printf "%t" .Values.hivemqMqtt.subscriptionIdentifier | default true }}</enabled>
        </subscription-identifier>
        <wildcard-subscriptions>
          <enabled>{{ printf "%t" .Values.hivemqMqtt.wildcardSubscriptions | default true }}</enabled>
        </wildcard-subscriptions>
        <shared-subscriptions>
          <enabled>{{ printf "%t" .Values.hivemqMqtt.sharedSubscriptions | default true }}</enabled>
        </shared-subscriptions>
        <quality-of-service>
          <max-qos>{{ .Values.hivemqMqtt.maxQualityOfService | default 2 }}</max-qos>
        </quality-of-service>
        <retained-messages>
          <enabled>{{ printf "%t" .Values.hivemqMqtt.retainedMessages | default true }}</enabled>
        </retained-messages>
        <queued-messages>
          <max-queue-size>{{ .Values.hivemqMqtt.queuedMessagesMaxSize | default 1000 | int64 }}</max-queue-size>
          <strategy>{{ .Values.hivemqMqtt.queuedMessagesStrategy | default "discard" }}</strategy>
        </queued-messages>
      </mqtt>
      {{- end }}
      {{- if .Values.hivemqMqttAddons }}
      <mqtt-addons>
        <expired-messages-topic>
          <enabled>{{ printf "%t" .Values.hivemqMqttAddons.expiredMessagesTopic | default false }}</enabled>
        </expired-messages-topic>
        <dropped-messages-topic>
          <enabled>{{ printf "%t" .Values.hivemqMqttAddons.droppedMessagesTopic | default false }}</enabled>
        </dropped-messages-topic>
        <dead-messages-topic>
          <enabled>{{ printf "%t" .Values.hivemqMqttAddons.deadMessagesTopic | default false }}</enabled>
        </dead-messages-topic>
      </mqtt-addons>
      {{- end }}
      {{- if .Values.hivemqMqttSecurity }}
      <security>
        <allow-empty-client-id>
          <enabled>{{ printf "%t" .Values.hivemqMqttSecurity.allowEmptyClientId | default true }}</enabled>
        </allow-empty-client-id>
        <payload-format-validation>
          <enabled>{{ printf "%t" .Values.hivemqMqttSecurity.payloadFormatValidation | default false }}</enabled>
        </payload-format-validation>
        <utf8-validation>
          <enabled>{{ printf "%t" .Values.hivemqMqttSecurity.utf8Validation | default true }}</enabled>
        </utf8-validation>
        <allow-request-problem-information>
          <enabled>{{ printf "%t" .Values.hivemqMqttSecurity.allowRequestProblemInformation | default true }}</enabled>
        </allow-request-problem-information>
        <control-center-audit-log>
          <enabled>{{ printf "%t" .Values.hivemqMqttSecurity.controlCenterAuditLog | default true }}</enabled>
        </control-center-audit-log>
      </security>
      {{- end }}
    </hivemq>
  tracing.xml: |-
    <?xml version="1.0" encoding="UTF-8" ?>
    <tracing xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="tracing.xsd">
      <context-propagation>
        <outbound-context-propagation>
          <enabled>false</enabled>
        </outbound-context-propagation>
      </context-propagation>
      <sampling>
        <publish-sampling>
          <enabled>true</enabled>
        </publish-sampling>
      </sampling>
    </tracing>
    {{- end -}}
{{- end }}
