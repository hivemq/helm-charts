suite: HiveMQ Platform Configuration as Secret - Configuration tests
templates:
  - hivemq-configuration.yml
  - hivemq-custom-resource.yml
release:
  name: test-hivemq-platform
  namespace: test-hivemq-platform-namespace
chart:
  version: 0.0.1
  appVersion: 1.0.0
set:
  config.createAs: Secret
asserts:
    - containsDocument:
      apiVersion: v1
      kind: Secret
      name: hivemq-configuration-test-hivemq-platform
      namespace: test-hivemq-platform-namespace
      template: hivemq-configuration.yml
tests:

  - it: with default Secret values, default Secret created
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: Secret
          name: hivemq-configuration-test-hivemq-platform
          namespace: test-hivemq-platform-namespace
        template: hivemq-configuration.yml

  - it: with default Secret values, no configMapName is added to the custom resource
    asserts:
      - notExists:
          path: spec.configMapName

  - it: with lower case secret for createAs value, schema validation fails
    set:
      config.createAs: secret
    asserts:
      - failedTemplate: {}

  - it: with invalid value for createAs, schema validation fails
    set:
      config.createAs: foobar
    asserts:
      - failedTemplate: {}

  - it: with default values, default labels created
    asserts:
      - isSubset:
          path: metadata.labels
          content:
            helm.sh/chart: hivemq-platform-0.0.1
            app.kubernetes.io/name: hivemq-platform
            app.kubernetes.io/instance: test-hivemq-platform
            app.kubernetes.io/version: 1.0.0
            app.kubernetes.io/managed-by: Helm
        template: hivemq-configuration.yml

  - it: with default platform values
    template: hivemq-configuration.yml
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>
      - exists:
          path: data["tracing.xml"]
      - equal:
          path: data["tracing.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0" encoding="UTF-8" ?>
            <tracing xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="tracing.xsd">
              <context-propagation>
                <outbound-context-propagation>
                  <enabled>false</enabled>
                </outbound-context-propagation>
              </context-propagation>
              <sampling>
                <publish-sampling>
                  <enabled>true</enabled>
                </publish-sampling>
              </sampling>
            </tracing>
      - notExists:
          path: data["logback.xml"]

  - it: with default platform values and custom hivemqInternalOptions config values
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: foo
          value: bar
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <internal>
                <option>
                  <key>foo</key>
                  <value>bar</value>
                </option>
              </internal>
            </hivemq>

  - it: with default platform values and a list of custom hivemqInternalOptions config values
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: foo
          value: bar
        - key: baz
          value: qux
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <internal>
                <option>
                  <key>foo</key>
                  <value>bar</value>
                </option>
                <option>
                  <key>baz</key>
                  <value>qux</value>
                </option>
              </internal>
            </hivemq>

  - it: with default platform values and empty hivemqInternalOptions config values, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions: {}
    asserts:
      - failedTemplate: {}

  - it: with missing key value for hivemqInternalOptions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - value: foobar
    asserts:
      - failedTemplate: {}

  - it: with missing value for hivemqInternalOptions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: foobar
    asserts:
      - failedTemplate: {}

  - it: with empty key value for hivemqInternalOptions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: ""
          value: foobar
    asserts:
      - failedTemplate: {}

  - it: with integer value for hivemqInternalOptions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: foobar
          value: 1.0
    asserts:
      - failedTemplate: {}

  - it: with integer as string value for hivemqInternalOptions config, schema validation succeeds
    template: hivemq-configuration.yml
    set:
      hivemqInternalOptions:
        - key: foobar
          value: "1.0"
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with default platform values and all default hivemqClientEventHistory config values
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory:
        enabled: false
        lifetime: 604800
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <client-event-history>
                <enabled>false</enabled>
                <lifetime>604800</lifetime>
              </client-event-history>
            </hivemq>

  - it: with default platform values and some default hivemqClientEventHistory config values
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory:
        enabled: false
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <client-event-history>
                <enabled>false</enabled>
              </client-event-history>
            </hivemq>

  - it: with default platform values and empty hivemqClientEventHistory config values
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid enabled value for hivemqClientEventHistory config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory:
        enabled: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid min lifetime value for hivemqClientEventHistory config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory:
        lifetime: 0
    asserts:
      - failedTemplate: {}

  - it: with invalid max lifetime value for hivemqClientEventHistory config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqClientEventHistory:
        lifetime: 2147483648
    asserts:
      - failedTemplate: {}

  - it: with default platform values and cluster overloadProtection config value enabled
    template: hivemq-configuration.yml
    set:
      hivemqOverloadProtection:
        enabled: true
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <overload-protection>
                <enabled>true</enabled>
              </overload-protection>
            </hivemq>

  - it: with default platform values and empty overloadProtection config value
    template: hivemq-configuration.yml
    set:
      hivemqOverloadProtection: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid enabled value for overloadProtection config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqOverloadProtection:
        enabled: foobar
    asserts:
      - failedTemplate: {}

  - it: with default platform values and cluster replication config value set
    template: hivemq-configuration.yml
    set:
      hivemqClusterReplication:
        replicaCount: 2
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
                <replication>
                  <replica-count>2</replica-count>
                </replication>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with default platform values and empty cluster replication config value
    template: hivemq-configuration.yml
    set:
      hivemqClusterReplication: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid config value for cluster replication, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqClusterReplication:
        replicaCount: foobar
    asserts:
      - failedTemplate: {}

  - it: with default platform values and all default hivemqRestrictions config values
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxConnections: -1
        incomingBandwidthThrottling: 0
        noConnectIdleTimeout: 10000
        maxClientIdLength: 65535
        maxTopicLength: 65535
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <restrictions>
                <max-connections>-1</max-connections>
                <incoming-bandwidth-throttling>0</incoming-bandwidth-throttling>
                <no-connect-idle-timeout>10000</no-connect-idle-timeout>
                <max-client-id-length>65535</max-client-id-length>
                <max-topic-length>65535</max-topic-length>
              </restrictions>
            </hivemq>

  - it: with default platform values and all custom hivemqRestrictions config values
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxConnections: 1
        incomingBandwidthThrottling: 2
        noConnectIdleTimeout: 3
        maxClientIdLength: 4
        maxTopicLength: 5
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <restrictions>
                <max-connections>1</max-connections>
                <incoming-bandwidth-throttling>2</incoming-bandwidth-throttling>
                <no-connect-idle-timeout>3</no-connect-idle-timeout>
                <max-client-id-length>4</max-client-id-length>
                <max-topic-length>5</max-topic-length>
              </restrictions>
            </hivemq>

  - it: with default platform values and some default hivemqRestrictions config values
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        incomingBandwidthThrottling: 0
        maxClientIdLength: 65535
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <restrictions>
                <incoming-bandwidth-throttling>0</incoming-bandwidth-throttling>
                <max-client-id-length>65535</max-client-id-length>
              </restrictions>
            </hivemq>

  - it: with default platform values and empty hivemqRestrictions config values
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid incomingBandwidthThrottling value for hivemqRestrictions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        incomingBandwidthThrottling: -2
    asserts:
      - failedTemplate: {}

  - it: with invalid maxClientIdLength value for hivemqRestrictions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxClientIdLength: 65536
    asserts:
      - failedTemplate: {}

  - it: with invalid maxConnections value for hivemqRestrictions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxConnections: -2
    asserts:
      - failedTemplate: {}

  - it: with invalid maxTopicLength value for hivemqRestrictions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxTopicLength: 65536
    asserts:
      - failedTemplate: {}

  - it: with invalid noConnectIdleTimeout value for hivemqRestrictions config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        noConnectIdleTimeout: -1
    asserts:
      - failedTemplate: {}

  - it: with default platform values and all default hivemqMqtt config values
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        sessionExpiryMaxInterval: 4294967295
        messageExpiryMaxInterval: 4294967296
        maxPacketSize: 268435460
        serverReceiveMaximum: 10
        keepAliveMax: 65535
        keepAliveAllowUnlimited: true
        topicAliasEnabled: true
        topicAliasMaxPerClient: 5
        subscriptionIdentifier: true
        wildcardSubscriptions: true
        sharedSubscriptions: true
        maxQualityOfService: 2
        retainedMessages: true
        queuedMessagesMaxSize: 1000
        queuedMessagesStrategy: "discard"
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <mqtt>
                <session-expiry>
                  <max-interval>4294967295</max-interval>
                </session-expiry>
                <message-expiry>
                  <max-interval>4294967296</max-interval>
                </message-expiry>
                <packets>
                  <max-packet-size>268435460</max-packet-size>
                </packets>
                <receive-maximum>
                  <server-receive-maximum>10</server-receive-maximum>
                </receive-maximum>
                <keep-alive>
                  <max-keep-alive>65535</max-keep-alive>
                  <allow-unlimited>true</allow-unlimited>
                </keep-alive>
                <topic-alias>
                  <enabled>true</enabled>
                  <max-per-client>5</max-per-client>
                </topic-alias>
                <subscription-identifier>
                  <enabled>true</enabled>
                </subscription-identifier>
                <wildcard-subscriptions>
                  <enabled>true</enabled>
                </wildcard-subscriptions>
                <shared-subscriptions>
                  <enabled>true</enabled>
                </shared-subscriptions>
                <quality-of-service>
                  <max-qos>2</max-qos>
                </quality-of-service>
                <retained-messages>
                  <enabled>true</enabled>
                </retained-messages>
                <queued-messages>
                  <max-queue-size>1000</max-queue-size>
                  <strategy>discard</strategy>
                </queued-messages>
              </mqtt>
            </hivemq>

  - it: with default platform values and some default hivemqMqtt config values
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        sessionExpiryMaxInterval: 4294967295
        maxPacketSize: 268435460
        keepAliveMax: 65535
        topicAliasEnabled: true
        subscriptionIdentifier: true
        sharedSubscriptions: true
        retainedMessages: true
        queuedMessagesStrategy: "discard"
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <mqtt>
                <session-expiry>
                  <max-interval>4294967295</max-interval>
                </session-expiry>
                <packets>
                  <max-packet-size>268435460</max-packet-size>
                </packets>
                <keep-alive>
                  <max-keep-alive>65535</max-keep-alive>
                </keep-alive>
                <topic-alias>
                  <enabled>true</enabled>
                </topic-alias>
                <subscription-identifier>
                  <enabled>true</enabled>
                </subscription-identifier>
                <shared-subscriptions>
                  <enabled>true</enabled>
                </shared-subscriptions>
                <retained-messages>
                  <enabled>true</enabled>
                </retained-messages>
                <queued-messages>
                  <strategy>discard</strategy>
                </queued-messages>
              </mqtt>
            </hivemq>

  - it: with default platform values and empty hivemqMqtt config values
    template: hivemq-configuration.yml
    set:
      hivemqMqtt: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid keepAliveAllowUnlimited value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        keepAliveAllowUnlimited: foobar
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds keepAliveMax value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        keepAliveMax: 65536
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds keepAliveMax value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        keepAliveMax: 0
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds maxPacketSize value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        maxPacketSize: 268435461
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds maxPacketSize value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        maxPacketSize: 14
    asserts:
      - failedTemplate: {}

  - it: with invalid maxQualityOfService value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        maxQualityOfService: 3
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds messageExpiryMaxInterval value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        messageExpiryMaxInterval: 4294967297
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds messageExpiryMaxInterval value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        messageExpiryMaxInterval: -1
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds queuedMessagesMaxSize value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        queuedMessagesMaxSize: 0
    asserts:
      - failedTemplate: {}

  - it: with invalid queuedMessagesStrategy value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        queuedMessagesStrategy: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid retainedMessages value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        retainedMessages: foobar
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds serverReceiveMaximum value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        serverReceiveMaximum: 65536
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds serverReceiveMaximum value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        serverReceiveMaximum: 0
    asserts:
      - failedTemplate: {}

  - it: with invalid sharedSubscriptions value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        sharedSubscriptions: foobar
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds sessionExpiryMaxInterval value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        sessionExpiryMaxInterval: 4294967296
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds sessionExpiryMaxInterval value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        sessionExpiryMaxInterval: -1
    asserts:
      - failedTemplate: {}

  - it: with invalid subscriptionIdentifier value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        subscriptionIdentifier: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid topicAliasEnabled value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        topicAliasEnabled: foobar
    asserts:
      - failedTemplate: {}

  - it: with max out of bounds topicAliasMaxPerClient value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        topicAliasMaxPerClient: 65536
    asserts:
      - failedTemplate: {}

  - it: with min out of bounds topicAliasMaxPerClient value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        topicAliasMaxPerClient: 0
    asserts:
      - failedTemplate: {}

  - it: with invalid wildcardSubscriptions value for hivemqMqtt config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqtt:
        wildcardSubscriptions: foobar
    asserts:
      - failedTemplate: {}

  - it: with default platform values and all default hivemqMqttAddons config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons:
        expiredMessagesTopic: false
        droppedMessagesTopic: false
        deadMessagesTopic: false
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <mqtt-addons>
                <expired-messages-topic>
                  <enabled>false</enabled>
                </expired-messages-topic>
                <dropped-messages-topic>
                  <enabled>false</enabled>
                </dropped-messages-topic>
                <dead-messages-topic>
                  <enabled>false</enabled>
                </dead-messages-topic>
              </mqtt-addons>
            </hivemq>

  - it: with default platform values and some default hivemqMqttAddons config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons:
        droppedMessagesTopic: false
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <mqtt-addons>
                <dropped-messages-topic>
                  <enabled>false</enabled>
                </dropped-messages-topic>
              </mqtt-addons>
            </hivemq>

  - it: with default platform values and empty hivemqMqttAddons config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid deadMessagesTopic value for hivemqMqttAddons config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons:
        deadMessagesTopic: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid droppedMessagesTopic value for hivemqMqttAddons config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons:
        droppedMessagesTopic: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid expiredMessagesTopic value for hivemqMqttAddons config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttAddons:
        expiredMessagesTopic: foobar
    asserts:
      - failedTemplate: {}

  - it: with default platform values and all default hivemqMqttSecurity config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        allowEmptyClientId: true
        payloadFormatValidation: false
        utf8Validation: true
        allowRequestProblemInformation: true
        controlCenterAuditLog: true
        restApiAuditLog: true
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <security>
                <allow-empty-client-id>
                  <enabled>true</enabled>
                </allow-empty-client-id>
                <payload-format-validation>
                  <enabled>false</enabled>
                </payload-format-validation>
                <utf8-validation>
                  <enabled>true</enabled>
                </utf8-validation>
                <allow-request-problem-information>
                  <enabled>true</enabled>
                </allow-request-problem-information>
                <control-center-audit-log>
                  <enabled>true</enabled>
                </control-center-audit-log>
                <rest-api-audit-log>
                  <enabled>true</enabled>
                </rest-api-audit-log>
              </security>
            </hivemq>

  - it: with default platform values and some default hivemqMqttSecurity config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        allowEmptyClientId: true
        utf8Validation: true
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <security>
                <allow-empty-client-id>
                  <enabled>true</enabled>
                </allow-empty-client-id>
                <utf8-validation>
                  <enabled>true</enabled>
                </utf8-validation>
              </security>
            </hivemq>

  - it: with default platform values and empty hivemqMqttSecurity config values
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity: {}
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
            </hivemq>

  - it: with invalid allowEmptyClientId value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        allowEmptyClientId: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid allowRequestProblemInformation value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        allowRequestProblemInformation: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid controlCenterAuditLog value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        controlCenterAuditLog: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid payloadFormatValidation value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        payloadFormatValidation: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid utf8Validation value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        utf8Validation: foobar
    asserts:
      - failedTemplate: {}

  - it: with invalid restApiAuditLog value for hivemqMqttSecurity config, schema validation fails
    template: hivemq-configuration.yml
    set:
      hivemqMqttSecurity:
        restApiAuditLog: foobar
    asserts:
      - failedTemplate: {}

  - it: with default platform values and all default HiveMQ configuration options set
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxConnections: -1
        incomingBandwidthThrottling: 0
        noConnectIdleTimeout: 10000
        maxClientIdLength: 65535
        maxTopicLength: 65535
      hivemqMqtt:
        sessionExpiryMaxInterval: 4294967295
        messageExpiryMaxInterval: 4294967296
        maxPacketSize: 268435460
        serverReceiveMaximum: 10
        keepAliveMax: 65535
        keepAliveAllowUnlimited: true
        topicAliasEnabled: true
        topicAliasMaxPerClient: 5
        subscriptionIdentifier: true
        wildcardSubscriptions: true
        sharedSubscriptions: true
        maxQualityOfService: 2
        retainedMessages: true
        queuedMessagesMaxSize: 1000
        queuedMessagesStrategy: "discard"
      hivemqMqttAddons:
        expiredMessagesTopic: false
        droppedMessagesTopic: false
        deadMessagesTopic: false
      hivemqMqttSecurity:
        allowEmptyClientId: true
        payloadFormatValidation: false
        utf8Validation: true
        allowRequestProblemInformation: true
        controlCenterAuditLog: true
        restApiAuditLog: true
      hivemqInternalOptions:
        - key: foobar
          value: "1.0"
      hivemqClientEventHistory:
        enabled: true
        lifetime: 1000
      hivemqOverloadProtection:
        enabled: true
      hivemqClusterReplication:
        replicaCount: 2
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
                <replication>
                  <replica-count>2</replica-count>
                </replication>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <internal>
                <option>
                  <key>foobar</key>
                  <value>1.0</value>
                </option>
              </internal>
              <client-event-history>
                <enabled>true</enabled>
                <lifetime>1000</lifetime>
              </client-event-history>
              <overload-protection>
                <enabled>true</enabled>
              </overload-protection>
              <restrictions>
                <max-connections>-1</max-connections>
                <incoming-bandwidth-throttling>0</incoming-bandwidth-throttling>
                <no-connect-idle-timeout>10000</no-connect-idle-timeout>
                <max-client-id-length>65535</max-client-id-length>
                <max-topic-length>65535</max-topic-length>
              </restrictions>
              <mqtt>
                <session-expiry>
                  <max-interval>4294967295</max-interval>
                </session-expiry>
                <message-expiry>
                  <max-interval>4294967296</max-interval>
                </message-expiry>
                <packets>
                  <max-packet-size>268435460</max-packet-size>
                </packets>
                <receive-maximum>
                  <server-receive-maximum>10</server-receive-maximum>
                </receive-maximum>
                <keep-alive>
                  <max-keep-alive>65535</max-keep-alive>
                  <allow-unlimited>true</allow-unlimited>
                </keep-alive>
                <topic-alias>
                  <enabled>true</enabled>
                  <max-per-client>5</max-per-client>
                </topic-alias>
                <subscription-identifier>
                  <enabled>true</enabled>
                </subscription-identifier>
                <wildcard-subscriptions>
                  <enabled>true</enabled>
                </wildcard-subscriptions>
                <shared-subscriptions>
                  <enabled>true</enabled>
                </shared-subscriptions>
                <quality-of-service>
                  <max-qos>2</max-qos>
                </quality-of-service>
                <retained-messages>
                  <enabled>true</enabled>
                </retained-messages>
                <queued-messages>
                  <max-queue-size>1000</max-queue-size>
                  <strategy>discard</strategy>
                </queued-messages>
              </mqtt>
              <mqtt-addons>
                <expired-messages-topic>
                  <enabled>false</enabled>
                </expired-messages-topic>
                <dropped-messages-topic>
                  <enabled>false</enabled>
                </dropped-messages-topic>
                <dead-messages-topic>
                  <enabled>false</enabled>
                </dead-messages-topic>
              </mqtt-addons>
              <security>
                <allow-empty-client-id>
                  <enabled>true</enabled>
                </allow-empty-client-id>
                <payload-format-validation>
                  <enabled>false</enabled>
                </payload-format-validation>
                <utf8-validation>
                  <enabled>true</enabled>
                </utf8-validation>
                <allow-request-problem-information>
                  <enabled>true</enabled>
                </allow-request-problem-information>
                <control-center-audit-log>
                  <enabled>true</enabled>
                </control-center-audit-log>
                <rest-api-audit-log>
                  <enabled>true</enabled>
                </rest-api-audit-log>
              </security>
            </hivemq>

  - it: with default platform values and all custom HiveMQ configuration options set
    template: hivemq-configuration.yml
    set:
      hivemqRestrictions:
        maxConnections: 1
        incomingBandwidthThrottling: 2
        noConnectIdleTimeout: 3
        maxClientIdLength: 4
        maxTopicLength: 5
      hivemqMqtt:
        sessionExpiryMaxInterval: 6
        messageExpiryMaxInterval: 7
        maxPacketSize: 20
        serverReceiveMaximum: 9
        keepAliveMax: 10
        keepAliveAllowUnlimited: false
        topicAliasEnabled: false
        topicAliasMaxPerClient: 11
        subscriptionIdentifier: false
        wildcardSubscriptions: false
        sharedSubscriptions: false
        maxQualityOfService: 2
        retainedMessages: false
        queuedMessagesMaxSize: 13
        queuedMessagesStrategy: "discard-oldest"
      hivemqMqttAddons:
        expiredMessagesTopic: true
        droppedMessagesTopic: true
        deadMessagesTopic: true
      hivemqMqttSecurity:
        allowEmptyClientId: false
        payloadFormatValidation: true
        utf8Validation: false
        allowRequestProblemInformation: false
        controlCenterAuditLog: false
        restApiAuditLog: false
      hivemqInternalOptions:
        - key: foobar
          value: "1.0"
      hivemqClientEventHistory:
        enabled: false
        lifetime: 14
      hivemqOverloadProtection:
        enabled: false
      hivemqClusterReplication:
        replicaCount: 1
    asserts:
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
                <replication>
                  <replica-count>1</replica-count>
                </replication>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <internal>
                <option>
                  <key>foobar</key>
                  <value>1.0</value>
                </option>
              </internal>
              <client-event-history>
                <enabled>false</enabled>
                <lifetime>14</lifetime>
              </client-event-history>
              <overload-protection>
                <enabled>false</enabled>
              </overload-protection>
              <restrictions>
                <max-connections>1</max-connections>
                <incoming-bandwidth-throttling>2</incoming-bandwidth-throttling>
                <no-connect-idle-timeout>3</no-connect-idle-timeout>
                <max-client-id-length>4</max-client-id-length>
                <max-topic-length>5</max-topic-length>
              </restrictions>
              <mqtt>
                <session-expiry>
                  <max-interval>6</max-interval>
                </session-expiry>
                <message-expiry>
                  <max-interval>7</max-interval>
                </message-expiry>
                <packets>
                  <max-packet-size>20</max-packet-size>
                </packets>
                <receive-maximum>
                  <server-receive-maximum>9</server-receive-maximum>
                </receive-maximum>
                <keep-alive>
                  <max-keep-alive>10</max-keep-alive>
                  <allow-unlimited>false</allow-unlimited>
                </keep-alive>
                <topic-alias>
                  <enabled>false</enabled>
                  <max-per-client>11</max-per-client>
                </topic-alias>
                <subscription-identifier>
                  <enabled>false</enabled>
                </subscription-identifier>
                <wildcard-subscriptions>
                  <enabled>false</enabled>
                </wildcard-subscriptions>
                <shared-subscriptions>
                  <enabled>false</enabled>
                </shared-subscriptions>
                <quality-of-service>
                  <max-qos>2</max-qos>
                </quality-of-service>
                <retained-messages>
                  <enabled>false</enabled>
                </retained-messages>
                <queued-messages>
                  <max-queue-size>13</max-queue-size>
                  <strategy>discard-oldest</strategy>
                </queued-messages>
              </mqtt>
              <mqtt-addons>
                <expired-messages-topic>
                  <enabled>true</enabled>
                </expired-messages-topic>
                <dropped-messages-topic>
                  <enabled>true</enabled>
                </dropped-messages-topic>
                <dead-messages-topic>
                  <enabled>true</enabled>
                </dead-messages-topic>
              </mqtt-addons>
              <security>
                <allow-empty-client-id>
                  <enabled>false</enabled>
                </allow-empty-client-id>
                <payload-format-validation>
                  <enabled>true</enabled>
                </payload-format-validation>
                <utf8-validation>
                  <enabled>false</enabled>
                </utf8-validation>
                <allow-request-problem-information>
                  <enabled>false</enabled>
                </allow-request-problem-information>
                <control-center-audit-log>
                  <enabled>false</enabled>
                </control-center-audit-log>
                <rest-api-audit-log>
                  <enabled>false</enabled>
                </rest-api-audit-log>
              </security>
            </hivemq>

  - it: with override HiveMQ config, config overwritten
    template: hivemq-configuration.yml
    set:
      config.overrideHiveMQConfig: |-
        <hivemq>
          <foobar/>
        </hivemq>
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: hivemq-configuration-test-hivemq-platform
      - exists:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          decodeBase64: true
          value: |-
            <hivemq>
              <foobar/>
            </hivemq>
      - exists:
          path: spec.secretName
        template: hivemq-custom-resource.yml
      - equal:
          path: spec.secretName
          value: hivemq-configuration-test-hivemq-platform
        template: hivemq-custom-resource.yml
      - notExists:
          path: spec.configMapName
        template: hivemq-custom-resource.yml

  - it: with existing Secret, but name not set, then fails
    template: hivemq-custom-resource.yml
    set:
      config.create: false
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ configuration Secret name cannot be empty when using an existing Secret

  - it: with existing Secret, then reuse existing Secret and no additional Secret is created
    template: hivemq-custom-resource.yml
    set:
      config.create: false
      config.name: my-custom-secret
    asserts:
      - exists:
          path: spec.secretName
      - equal:
          path: spec.secretName
          value: my-custom-secret
      - hasDocuments:
          count: 0
        template: hivemq-configuration.yml

  - it: with custom tracing.xml
    template: hivemq-configuration.yml
    set:
      config.customTracingConfig: |-
        <tracing>
          <foobar/>
        </tracing>
    asserts:
      - exists:
          path: data["config.xml"]
      - notExists:
          path: data["logback.xml"]
      - exists:
          path: data["tracing.xml"]
      - equal:
          path: data["tracing.xml"]
          decodeBase64: true
          value: |-
            <tracing>
              <foobar/>
            </tracing>

  - it: with custom logback.xml
    template: hivemq-configuration.yml
    set:
      config.customLogbackConfig: |-
        <configuration>
          <foobar/>
        </configuration>
    asserts:
      - exists:
          path: data["config.xml"]
      - exists:
          path: data["tracing.xml"]
      - exists:
          path: data["logback.xml"]
      - equal:
          path: data["logback.xml"]
          decodeBase64: true
          value: |-
            <configuration>
              <foobar/>
            </configuration>
