suite: test HiveMQ Platform custom resource
templates:
  - hivemq-custom-resource.yml
tests:

  - it: with operator selector
    set:
      operator.selector: north
    asserts:
      - isKind:
          of: HiveMQPlatform
      - equal:
          path: metadata.labels.operator
          value: north

  - it: with image definition
    set:
      image.repository: test-repo
      image.name: test-image
      image.tag: snapshot
      image.pullPolicy: IfNotPresent
      image.pullSecretName: test-secret
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.imagePullSecrets[0]
      - equal:
          path: spec.statefulSet.spec.template.spec.imagePullSecrets[0].name
          value: test-secret
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0]
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].image
          value: test-repo/test-image:snapshot
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].imagePullPolicy
          value: IfNotPresent

  - it: with init containers
    set:
      config.overrideInitContainers: |-
        - name: test-init-container
          image: busybox
    asserts:
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.initContainers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.initContainers[0]
      - equal:
          path: spec.statefulSet.spec.template.spec.initContainers[0].name
          value: test-init-container
      - equal:
          path: spec.statefulSet.spec.template.spec.initContainers[0].image
          value: busybox

  - it: without init containers
    set:
      config.overrideInitContainers:
    asserts:
      - notExists:
          path: spec.statefulSet.spec.template.spec.initContainers

  - it: with default service account
    asserts:
      - notExists:
          path: spec.statefulSet.spec.template.spec.serviceAccountName

  - it: with custom service account
    set:
      nodes.serviceAccountName: my-custom-sa
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.serviceAccountName
      - equal:
          path: spec.statefulSet.spec.template.spec.serviceAccountName
          value: my-custom-sa

  - it: with containers
    set:
      nodes.replicaCount: 10
      nodes.logLevel: ERROR
    asserts:
      - isKind:
          of: HiveMQPlatform
      - equal:
          path: spec.logLevel
          value: ERROR
      - equal:
          path: spec.statefulSet.spec.replicas
          value: 10
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0]
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].name
          value: hivemq

  - it: with custom environment variables for the HiveMQ container
    values:
      - custom-env-vars-values.yaml
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0]
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].env
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR1
            value: "mycustomvalue1"
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR2
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: mysecretkey
                optional: false
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR3
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: myconfigmapkey
                optional: true

  - it: with resource limits
    set:
      nodes.resources.cpu: 1c
      nodes.resources.memory: 1m
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0]
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].resources.limits.cpu
          value: 1c
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].resources.limits.memory
          value: 1m

  - it: with default security context disabled
    asserts:
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext

  - it: with default security context values enabled
    set:
      nodes.podSecurityContext.enabled: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 10000
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with custom security context values enabled
    set:
      nodes.podSecurityContext.enabled: true
      nodes.podSecurityContext.runAsUser: 10001
      nodes.podSecurityContext.runAsGroup: 10002
      nodes.podSecurityContext.fsGroup: 10003
      nodes.podSecurityContext.runAsNonRoot: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 10001
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 10002
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
          value: 10003
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with default values, no volumes are defined
    asserts:
      - notExists:
          path: spec.statefulSet.spec.template.spec.volumes
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts

  - it: with additional volumes
    values:
      - additional-volumes-values.yaml
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: test-mount-volume
            configMap:
              name: test-volume
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: test-secret-volume
            secret:
              secretName: test-secret-volume
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: test-empty-dir-volume
            emptyDir: {}
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: test-persistent-volume-claim-volume
            persistentVolumeClaim:
              claimName: test-persistent-volume-claim-volume
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: test-mount-volume
            mountPath: /additional-configmap-volume/subpath-configmap
            subPath: subpath-configmap
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: test-secret-volume
            mountPath: /additional-secret-volume
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: test-empty-dir-volume
            mountPath: /additional-empty-dir-volume
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: test-persistent-volume-claim-volume
            mountPath: /additional-persistent-volume-claim-volume
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.volumes
          count: 4
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          count: 4

  - it: with invalid additional volumes, then fails
    set:
      additionalVolumes:
        - type: fakeAdditionalVolume
          name: fake-volume-name
          path: /fake-volume-path
    asserts:
      - failedTemplate:
          errorMessage: Invalid type or not supported type for additional volume

  - it: with pod scheduling values set
    values:
      - pod-scheduling-values.yaml
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.affinity
      - isSubset:
          path: spec.statefulSet.spec.template.spec.affinity
          content:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - my-app
                  topologyKey: "kubernetes.io/hostname"
      - exists:
          path: spec.statefulSet.spec.template.spec.tolerations
      - contains:
          path: spec.statefulSet.spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: my-key
            operator: Exists

  - it: with custom pod annotations
    set:
      nodes:
        annotations:
          ad.datadoghq.com/hivemq.check_names: '["hivemq"]'
          ad.datadoghq.com/hivemq.init_configs: '[{"is_jmx": true, "collect_default_metrics": true}]'
          ad.datadoghq.com/hivemq.instances: '[{"host": "%%host%%", "port": "9010"}]'
          ad.datadoghq.com/hivemq.logs: '[{"source": "hivemq", "service": "hivemq-platform-mqtt-1883"}]'
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.metadata.annotations
      - isSubset:
          path: spec.statefulSet.spec.template.metadata.annotations
          content:
            ad.datadoghq.com/hivemq.check_names: '["hivemq"]'
            ad.datadoghq.com/hivemq.init_configs: '[{"is_jmx": true, "collect_default_metrics": true}]'
            ad.datadoghq.com/hivemq.instances: '[{"host": "%%host%%", "port": "9010"}]'
            ad.datadoghq.com/hivemq.logs: '[{"source": "hivemq", "service": "hivemq-platform-mqtt-1883"}]'
