suite: HiveMQ Enterprise Extension license tests
templates:
  - hivemq-custom-resource.yml
  - hivemq-license.yml
release:
  name: test-hivemq-platform
tests:

  - it: with extension license, Secret metadata is correct
    set:
      license.create: true
      license.extensions.kafka.data: kafka-extension-license-content
    asserts:
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml

  - it: with extension license only, no additional license added
    set:
      license.create: true
      license.extensions.kafka.data: kafka-extension-license-content
    asserts:
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data
          value:
            kafka.elic: kafka-extension-license-content
        template: hivemq-license.yml

  - it: with extension license data empty, then validation fails
    set:
      license.create: true
      license.extensions.kafka.data: ""
    asserts:
      - failedTemplate:
          errorMessage: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense empty, then validation fails
    set:
      license.create: true
      license.extensions.kafka.overrideLicense: ""
    asserts:
      - failedTemplate:
          errorMessage: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense and data empty, then validation fails
    set:
      license.create: true
      license.extensions.kafka.data: ""
      license.extensions.kafka.overrideLicense: ""
    asserts:
      - failedTemplate:
          errorMessage: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense and data set, then validation fails
    set:
      license.create: true
      license.extensions.kafka.data: kafka-extension-license-content1
      license.extensions.kafka.overrideLicense: kafka-extension-license-content2
    asserts:
      - failedTemplate:
          errorMessage: Both `data` and `overrideLicense` values are set for the HiveMQ Enterprise Extension 'kafka' license content. Please, use only one of them
        template: hivemq-license.yml

  - it: with invalid extension license values, then validation fails
    set:
      license.create: true
      license.extensions.kafka.foo: kafka-extension-license-content1
      license.extensions.kafka.bar: kafka-extension-license-content2
    asserts:
      - failedTemplate:
          errorMessage: Invalid values for setting the HiveMQ Enterprise Extension 'kafka' license content. Only `data` or `overrideLicense` values are allowed
        template: hivemq-license.yml

  - it: with license extensions data, extension license created
    set:
      license.create: true
      license.extensions.kafka.data: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple license extensions data, multiple extension licenses created
    set:
      license.create: true
      license.extensions.kafka.data: kafka-extension-license-content
      license.extensions.pubsub.data: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple extension license data, broker and multiple extension licenses created
    set:
      license.create: true
      license.data: broker-license-content
      license.extensions.kafka.data: kafka-extension-license-content
      license.extensions.pubsub.data: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with license extensions overrideLicense, extension license created
    set:
      license.create: true
      license.extensions.kafka.overrideLicense: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with multiple license extensions overrideLicense, multiple extension licenses created
    set:
      license.create: true
      license.extensions.kafka.overrideLicense: kafka-extension-license-content
      license.extensions.pubsub.overrideLicense: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with with broker license overrideLicense and multiple extension license overrideLicense, broker and extension licenses created
    set:
      license.create: true
      license.overrideLicense: broker-license-content
      license.extensions.kafka.overrideLicense: kafka-extension-license-content
      license.extensions.pubsub.overrideLicense: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and license extensions overrideLicense, broker and extension license created
    set:
      license.create: true
      license.data: broker-license-content
      license.extensions.kafka.overrideLicense: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple license extensions overrideLicense, broker and extension licenses created
    set:
      license.create: true
      license.data: broker-license-content
      license.extensions.kafka.overrideLicense: kafka-extension-license-content
      license.extensions.pubsub.overrideLicense: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license overrideLicense and license extensions data, broker and extension license created
    set:
      license.create: true
      license.overrideLicense: broker-license-content
      license.extensions.kafka.data: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml
