suite: HiveMQ Platform - HiveMQ Enterprise Extension license tests
templates:
  - hivemq-custom-resource.yml
  - hivemq-license.yml
release:
  name: test-hivemq-platform
tests:

  - it: with extension license, Secret metadata is correct
    set:
      license.create: true
      license.extensions.kafka.data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
    asserts:
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml

  - it: with extension license only, no additional license added
    set:
      license:
        create: true
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
    asserts:
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml

  - it: with extension license data empty, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            data: ""
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense empty, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            overrideLicense: ""
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense and data empty, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            data: ""
            overrideLicense: ""
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'kafka' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with extension license overrideLicense and data set, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content1
            overrideLicense: kafka-extension-license-content2
    asserts:
      - failedTemplate:
          errorPattern: Both `data` and `overrideLicense` values are set for the HiveMQ Enterprise Extension 'kafka' license content. Please, use only one of them
        template: hivemq-license.yml

  - it: with invalid extension license values, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            foo: kafka-extension-license-content1
            bar: kafka-extension-license-content2
    asserts:
      - failedTemplate:
          errorPattern: Invalid values for setting the HiveMQ Enterprise Extension 'kafka' license content. Only `data` or `overrideLicense` values are allowed
        template: hivemq-license.yml

  - it: with invalid Base64 encoded extension license data, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'kafka' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with invalid Base64 encoded extension license data but Base64 encoded disabled, then validation succeeds
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        extensions:
          kafka:
            data: invalid-base64-encoded-data
    asserts:
      - notFailedTemplate: { hivemq-license.yml }
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with valid and invalid Base64 encoded extension licenses data, then validation fails
    set:
      license:
        create: true
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
          pubsub:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'pubsub' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with valid Base64 encoded broker license data and invalid Base64 encoded extension license data, then validation fails
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        extensions:
          kafka:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Enterprise Extension 'kafka' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with invalid Base64 encoded broker license data and valid Base64 encoded extension license data, then validation fails
    set:
      license:
        create: true
        data: invalid-base64-encoded-data
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Broker 'license.lic' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with extension license data, extension license created
    set:
      license:
        create: true
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear extension license data, extension license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        extensions:
          kafka:
            data: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple extension licenses data, multiple extension licenses created
    set:
      license:
        create: true
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
          pubsub:
            data: cHVic3ViLWV4dGVuc2lvbi1saWNlbnNlLWNvbnRlbnQ= # pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear multiple extension licenses data, multiple extension licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        extensions:
          kafka:
            data: kafka-extension-license-content
          pubsub:
            data: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["pubsub.elic"]
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple extension license data, broker and multiple extension licenses created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
          pubsub:
            data: cHVic3ViLWV4dGVuc2lvbi1saWNlbnNlLWNvbnRlbnQ= # pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and multiple clear extension license data, broker and multiple extension licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        extensions:
          kafka:
            data: kafka-extension-license-content
          pubsub:
            data: pubsub-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["pubsub.elic"]
          value: pubsub-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with extension license overrideLicense, extension license created
    set:
      license:
        create: true
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with clear extension license overrideLicense, extension license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with multiple extension licenses overrideLicense, multiple extension licenses created
    set:
      license:
        create: true
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple clear extension licenses overrideLicense, multiple extension licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["pubsub.elic"]
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license overrideLicense and multiple extension license overrideLicense, broker and extension licenses created
    set:
      license:
        create: true
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license overrideLicense and multiple clear extension license overrideLicense, broker and extension licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["pubsub.elic"]
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and extension license overrideLicense, broker and extension license created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and clear extension license overrideLicense, broker and extension license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple extension licenses overrideLicense, broker and extension licenses created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["pubsub.elic"]
          decodeBase64: true
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and multiple clear extension licenses overrideLicense, broker and extension licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        extensions:
          kafka:
            overrideLicense: |-
              kafka-extension-license-content1
              kafka-extension-license-content2
          pubsub:
            overrideLicense: |-
              pubsub-extension-license-content1
              pubsub-extension-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: |-
            kafka-extension-license-content1
            kafka-extension-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["pubsub.elic"]
          value: |-
            pubsub-extension-license-content1
            pubsub-extension-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license overrideLicense and extension license data, broker and extension license created
    set:
      license:
        create: true
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        extensions:
          kafka:
            data: a2Fma2EtZXh0ZW5zaW9uLWxpY2Vuc2UtY29udGVudA== # kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["kafka.elic"]
          decodeBase64: true
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license overrideLicense and clear extension license data, broker and extension license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        extensions:
          kafka:
            data: kafka-extension-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["kafka.elic"]
          value: kafka-extension-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml
