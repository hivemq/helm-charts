suite: HiveMQ Platform - Additional HiveMQ Broker license tests
templates:
  - hivemq-custom-resource.yml
  - hivemq-license.yml
release:
  name: test-hivemq-platform
tests:

  - it: with additional broker license, Secret metadata is correct
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml

  - it: with additional broker license only, no additional license added
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml

  - it: with additional broker license data empty, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: ""
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense empty, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            overrideLicense: ""
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense and data empty, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: ""
            overrideLicense: ""
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense and data set, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: broker1-license-content1
            overrideLicense: broker1-license-content2
    asserts:
      - failedTemplate:
          errorPattern: Both `data` and `overrideLicense` values are set for the Additional HiveMQ Broker 'broker1' license content. Please, use only one of them
        template: hivemq-license.yml

  - it: with invalid additional broker license values, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            foo: broker1-license-content1
            bar: broker1-license-content2
    asserts:
      - failedTemplate:
          errorPattern: Invalid values for setting the Additional HiveMQ Broker 'broker1' license content. Only `data` or `overrideLicense` values are allowed
        template: hivemq-license.yml

  - it: with broker license and duplicated "license.lic" for additional broker license data, then validation fails
    set:
      license:
        create: true
        data: broker-license-content
        additionalLicenses:
          license:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker license 'license' is already defined for the default broker license. Please, use a different license name
        template: hivemq-license.yml

  - it: with no broker license and duplicated "license.lic" for additional broker license data, then validation succeeds
    set:
      license:
        create: true
        additionalLicenses:
          license:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - notFailedTemplate: {}
        template: hivemq-license.yml
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with broker license and duplicated "license.lic" for additional broker license overrideLicense, then validation fails
    set:
      license:
        create: true
        overrideLicense: broker-license-content
        additionalLicenses:
          license:
            overrideLicense: broker1-license-content
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker license 'license' is already defined for the default broker license. Please, use a different license name
        template: hivemq-license.yml

  - it: with no broker license and duplicated "license.lic" for additional broker license overrideLicense, then validation succeeds
    set:
      license:
        create: true
        additionalLicenses:
          license:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
    asserts:
      - notFailedTemplate: {}
        template: hivemq-license.yml
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with invalid Base64 encoded additional broker license data, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker1' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with invalid Base64 encoded additional broker license data but Base64 encoded disabled, then validation succeeds
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        additionalLicenses:
          broker1:
            data: invalid-base64-encoded-data
    asserts:
      - notFailedTemplate: { hivemq-license.yml }
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with valid and invalid Base64 encoded additional broker licenses data, then validation fails
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
          broker2:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker2' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with valid Base64 encoded broker license data and invalid Base64 encoded additional broker license data, then validation fails
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        additionalLicenses:
          broker1:
            data: invalid-base64-encoded-data
    asserts:
      - failedTemplate:
          errorPattern: Additional HiveMQ Broker 'broker1' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with invalid Base64 encoded broker license data and valid Base64 encoded additional broker license data, then validation fails
    set:
      license:
        create: true
        data: invalid-base64-encoded-data
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - failedTemplate:
          errorPattern: HiveMQ Broker 'license.lic' license data content is not a Base64 encoded string
        template: hivemq-license.yml

  - it: with additional brokers license data, additional broker license created
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear additional brokers license data, additional broker license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        additionalLicenses:
          broker1:
            data: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple additional broker licenses data, multiple additional broker licenses created
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
          broker2:
            data: YnJva2VyMi1saWNlbnNlLWNvbnRlbnQ= # broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple clear additional broker licenses data, multiple additional broker licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        additionalLicenses:
          broker1:
            data: broker1-license-content
          broker2:
            data: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["broker2.lic"]
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple additional broker licenses data, broker and multiple additional broker licenses created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
          broker2:
            data: YnJva2VyMi1saWNlbnNlLWNvbnRlbnQ= # broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and multiple clear additional broker licenses data, broker and multiple additional broker licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        additionalLicenses:
          broker1:
            data: broker1-license-content
          broker2:
            data: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["broker2.lic"]
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with additional brokers overrideLicense, additional broker license created
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with clear additional brokers overrideLicense, additional broker license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with multiple additional broker licenses overrideLicenses, multiple additional broker licenses created
    set:
      license:
        create: true
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple clear additional broker licenses overrideLicenses, multiple additional broker licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - notExists:
          path: stringData["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["broker2.lic"]
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with with broker license overrideLicense and multiple additional broker licenses overrideLicenses, broker and additional broker licenses created
    set:
      license:
        create: true
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with with clear broker license overrideLicense and multiple clear additional broker license overrideLicenses, broker and additional broker licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["broker2.lic"]
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and additional broker licenses overrideLicenses, broker and additional broker license created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and clear additional broker license overrideLicenses, broker and additional broker license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple additional broker licenses overrideLicenses, broker and additional broker licenses created
    set:
      license:
        create: true
        data: YnJva2VyLWxpY2Vuc2UtY29udGVudA== # broker-license-content
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license data and multiple clear additional broker licenses overrideLicenses, broker and additional broker licenses created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        data: broker-license-content
        additionalLicenses:
          broker1:
            overrideLicense: |-
              broker1-license-content1
              broker1-license-content2
          broker2:
            overrideLicense: |-
              broker2-license-content1
              broker2-license-content2
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: |-
            broker1-license-content1
            broker1-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["broker2.lic"]
          value: |-
            broker2-license-content1
            broker2-license-content2
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license overrideLicense and additional broker licenses data, broker and additional broker license created
    set:
      license:
        create: true
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        additionalLicenses:
          broker1:
            data: YnJva2VyMS1saWNlbnNlLWNvbnRlbnQ= # broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: stringData
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with clear broker license overrideLicense and clear additional broker licenses data, broker and additional broker license created without Base64 encoded
    set:
      license:
        create: true
        isLicenseBase64Encoded: false
        overrideLicense: |-
          broker-license-content1
          broker-license-content2
        additionalLicenses:
          broker1:
            data: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - notExists:
          path: data
        template: hivemq-license.yml
      - exists:
          path: stringData
        template: hivemq-license.yml
      - equal:
          path: stringData["license.lic"]
          value: |-
            broker-license-content1
            broker-license-content2
        template: hivemq-license.yml
      - equal:
          path: stringData["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml
