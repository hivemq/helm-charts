suite: Additional HiveMQ Broker license tests
templates:
  - hivemq-custom-resource.yml
  - hivemq-license.yml
release:
  name: test-hivemq-platform
tests:

  - it: with additional broker license, Secret metadata is correct
    set:
      license.create: true
      license.additionalLicenses.broker1.data: broker1-license-content
    asserts:
      - containsDocument:
          kind: Secret
          apiVersion: v1
          name: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml

  - it: with additional broker license only, no additional license added
    set:
      license.create: true
      license.additionalLicenses.broker1.data: broker1-license-content
    asserts:
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data
          value:
            broker1.lic: broker1-license-content
        template: hivemq-license.yml

  - it: with additional broker license data empty, then validation fails
    set:
      license.create: true
      license.additionalLicenses.broker1.data: ""
    asserts:
      - failedTemplate:
          errorMessage: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense empty, then validation fails
    set:
      license.create: true
      license.additionalLicenses.broker1.overrideLicense: ""
    asserts:
      - failedTemplate:
          errorMessage: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense and data empty, then validation fails
    set:
      license.create: true
      license.additionalLicenses.broker1.data: ""
      license.additionalLicenses.broker1.overrideLicense: ""
    asserts:
      - failedTemplate:
          errorMessage: Additional HiveMQ Broker 'broker1' license content cannot be empty. Please, use either `data` or `overrideLicense` values
        template: hivemq-license.yml

  - it: with additional broker license overrideLicense and data set, then validation fails
    set:
      license.create: true
      license.additionalLicenses.broker1.data: broker1-license-content1
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content2
    asserts:
      - failedTemplate:
          errorMessage: Both `data` and `overrideLicense` values are set for the Additional HiveMQ Broker 'broker1' license content. Please, use only one of them
        template: hivemq-license.yml

  - it: with invalid additional broker license values, then validation fails
    set:
      license.create: true
      license.additionalLicenses.broker1.foo: broker1-license-content1
      license.additionalLicenses.broker1.bar: broker1-license-content2
    asserts:
      - failedTemplate:
          errorMessage: Invalid values for setting the Additional HiveMQ Broker 'broker1' license content. Only `data` or `overrideLicense` values are allowed
        template: hivemq-license.yml

  - it: with broker license and duplicated "license.lic" for additional broker license data, then validation fails
    set:
      license.create: true
      license.data: broker-license-content
      license.additionalLicenses.license.data: broker1-license-content
    asserts:
      - failedTemplate:
          errorMessage: Additional HiveMQ Broker license 'license' is already defined for the default broker license. Please, use a different license name
        template: hivemq-license.yml

  - it: with no broker license and duplicated "license.lic" for additional broker license data, then validation succeeds
    set:
      license.create: true
      license.additionalLicenses.license.data: broker1-license-content
    asserts:
      - notFailedTemplate: {}
        template: hivemq-license.yml
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with broker license and duplicated "license.lic" for additional broker license overrideLicense, then validation fails
    set:
      license.create: true
      license.overrideLicense: broker-license-content
      license.additionalLicenses.license.overrideLicense: broker1-license-content
    asserts:
      - failedTemplate:
          errorMessage: Additional HiveMQ Broker license 'license' is already defined for the default broker license. Please, use a different license name
        template: hivemq-license.yml

  - it: with no broker license and duplicated "license.lic" for additional broker license overrideLicense, then validation succeeds
    set:
      license.create: true
      license.additionalLicenses.license.overrideLicense: broker1-license-content
    asserts:
      - notFailedTemplate: {}
        template: hivemq-license.yml
      - hasDocuments:
          count: 1
        template: hivemq-license.yml

  - it: with additional brokers license data, additional broker license created
    set:
      license.create: true
      license.additionalLicenses.broker1.data: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with multiple license additional brokers data, multiple additional broker licenses created
    set:
      license.create: true
      license.additionalLicenses.broker1.data: broker1-license-content
      license.additionalLicenses.broker2.data: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple license additional brokers data, broker and multiple additional broker licenses created
    set:
      license.create: true
      license.data: broker-license-content
      license.additionalLicenses.broker1.data: broker1-license-content
      license.additionalLicenses.broker2.data: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with additional brokers overrideLicense, additional broker license created
    set:
      license.create: true
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
        template: hivemq-custom-resource.yml

  - it: with multiple license additional brokers overrideLicenses, multiple additional broker licenses created
    set:
      license.create: true
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content
      license.additionalLicenses.broker2.overrideLicense: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - notExists:
          path: data["license.lic"]
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with with broker license overrideLicense and multiple license additional brokers overrideLicenses, broker and additional broker licenses created
    set:
      license.create: true
      license.overrideLicense: broker-license-content
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content
      license.additionalLicenses.broker2.overrideLicense: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and license additional brokers overrideLicenses, broker and additional broker license created
    set:
      license.create: true
      license.data: broker-license-content
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license data and multiple license additional brokers overrideLicenses, broker and additional broker licenses created
    set:
      license.create: true
      license.data: broker-license-content
      license.additionalLicenses.broker1.overrideLicense: broker1-license-content
      license.additionalLicenses.broker2.overrideLicense: broker2-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          decodeBase64: true
          value: broker1-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker2.lic"]
          decodeBase64: true
          value: broker2-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml

  - it: with broker license overrideLicense and license additional brokers data, broker and additional broker license created
    set:
      license.create: true
      license.overrideLicense: broker-license-content
      license.additionalLicenses.broker1.data: broker1-license-content
    asserts:
      - isKind:
          of: Secret
        template: hivemq-license.yml
      - equal:
          path: metadata.name
          value: hivemq-license-test-hivemq-platform
        template: hivemq-license.yml
      - exists:
          path: data
        template: hivemq-license.yml
      - equal:
          path: data["license.lic"]
          decodeBase64: true
          value: broker-license-content
        template: hivemq-license.yml
      - equal:
          path: data["broker1.lic"]
          value: broker1-license-content
        template: hivemq-license.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].volumeMounts
          content:
            name: licenses
            mountPath: /opt/hivemq/license
          count: 1
        template: hivemq-custom-resource.yml
      - exists:
          path: spec.statefulSet.spec.template.spec.volumes
        template: hivemq-custom-resource.yml
      - contains:
          path: spec.statefulSet.spec.template.spec.volumes
          content:
            name: licenses
            secret:
              secretName: hivemq-license-test-hivemq-platform
          count: 1
        template: hivemq-custom-resource.yml
