suite: HiveMQ Platform CustomResource - Pod and Container Security Context tests
templates:
  - hivemq-custom-resource.yml
tests:

  - it: with defaults, no pod security context set
    asserts:
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext

  - it: with default pod security context enabled, then default pod security context set
    set:
      nodes.podSecurityContext.enabled: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 10000
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with custom pod security context using non-root user values, then custom pod security context set
    set:
      nodes:
        podSecurityContext:
          enabled: true
          runAsUser: 10001
          runAsGroup: 10002
          fsGroup: 10003
          runAsNonRoot: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 10001
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 10002
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
          value: 10003
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with pod security context root user values, then pod security context set
    set:
      nodes:
        podSecurityContext:
          enabled: true
          runAsUser: 0
          runAsGroup: 0
          fsGroup: 10003
          runAsNonRoot: false
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 0
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
          value: 10003
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with only pod security context runAsNonRoot false, then no more pod security context values are needed
    set:
      nodes:
        podSecurityContext:
          enabled: true
          runAsNonRoot: false
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with additional custom pod security context values, then custom pod security context set
    set:
      nodes:
        podSecurityContext:
          enabled: true
          supplementalGroups: [4000]
          supplementalGroupsPolicy: Strict
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsUser
          value: 10000
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.supplementalGroups
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.supplementalGroups
          value: [4000]
      - exists:
          path: spec.statefulSet.spec.template.spec.securityContext.supplementalGroupsPolicy
      - equal:
          path: spec.statefulSet.spec.template.spec.securityContext.supplementalGroupsPolicy
          value: Strict

  - it: with pod security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      nodes:
        podSecurityContext:
          enabled: true
          runAsNonRoot: false
          runAsUser: 10000
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` (root)

  - it: with security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      nodes:
        podSecurityContext:
          enabled: true
          runAsNonRoot: true
          runAsUser: 0
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` (root)

  - it: with defaults, no container security context set
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext

  - it: with custom container security context using non-root user values, then custom container security context set
    set:
      nodes:
        containerSecurityContext:
          runAsUser: 10001
          runAsGroup: 10002
          runAsNonRoot: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 10001
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 10002

  - it: with container security context root user values, then container security context set
    set:
      nodes:
        containerSecurityContext:
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only container security context runAsNonRoot false, then no more container security context values are needed
    set:
      nodes.containerSecurityContext.runAsNonRoot: false
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: when only setting container security context runAsNonRoot to true, then no more container security context values are needed
    set:
      nodes.containerSecurityContext.runAsNonRoot: true
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 10000
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only custom container security context runAsUser value, then only security context set for runAsUser
    set:
      nodes.containerSecurityContext.runAsUser: 10001
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 10001
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with only custom container security context runAsGroup value, then only security context set for runAsGroup
    set:
      nodes.containerSecurityContext.runAsGroup: 10002
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 10002

  - it: with only custom container security context runAsUser and runAsGroup value, then only security context set for runAsUser and runAsGroup
    set:
      nodes:
        containerSecurityContext:
          runAsUser: 10001
          runAsGroup: 10002
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
          value: 10001
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup
          value: 10002

  - it: with additional custom container security context values, then custom container security context set
    set:
      nodes:
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers
      - lengthEqual:
          path: spec.statefulSet.spec.template.spec.containers
          count: 1
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
      - equal:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.capabilities
      - isSubset:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.capabilities
          content:
            drop:
              - ALL
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsUser
      - notExists:
          path: spec.statefulSet.spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with container security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      nodes:
        containerSecurityContext:
          runAsNonRoot: false
          runAsUser: 10000
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` (root)

  - it: with container security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      nodes:
        containerSecurityContext:
          runAsNonRoot: true
          runAsUser: 0
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` (root)
