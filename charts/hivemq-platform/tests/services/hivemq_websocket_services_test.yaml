suite: HiveMQ Platform - WebSocket services tests
templates:
  - hivemq-custom-resource.yml
release:
  name: test-hivemq-platform
tests:

  - it: with a WebSocket service enabled
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].ports[0]
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].ports
          content:
            name: ws-8000
            containerPort: 8000
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-ws-8000
            spec:
              ports:
                - name: ws-8000
                  targetPort: ws-8000
                  port: 8000

  - it: with a WebSocket service disabled, no WebSocket service added
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].ports[0]
      - notContains:
          path: spec.statefulSet.spec.template.spec.containers[0].ports
          content:
            name: ws-8000
            containerPort: 8000
      - exists:
          path: spec.services
      - notContains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-ws-8000
            spec:
              ports:
                - name: ws-8000
                  targetPort: ws-8000
                  port: 8000

  - it: with WebSocket service enabled with no session affinity, then no service session affinity
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8001
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-ws-8001
            spec:
              ports:
                - name: ws-8001
                  targetPort: ws-8001
                  port: 8001

  - it: with WebSocket service enabled and session affinity `ClientIP`, then service session affinity is `ClientIP`
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8001
          sessionAffinity:
            type: ClientIP
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-ws-8001
            spec:
              ports:
                - name: ws-8001
                  targetPort: ws-8001
                  port: 8001
              sessionAffinity: ClientIP

  - it: with WebSocket service enabled and session affinity `None`, then service session affinity is `None`
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8001
          sessionAffinity:
            type: None
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-ws-8001
            spec:
              ports:
                - name: ws-8001
                  targetPort: ws-8001
                  port: 8001
              sessionAffinity: None

  - it: with a WebSocket service exposed and a duplicated listener name, validation fails
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
          hivemqListenerName: my-custom-ws-listener
        - type: websocket
          exposed: true
          containerPort: 8001
          hivemqListenerName: my-custom-ws-listener
    asserts:
      - failedTemplate:
          errorPattern: Found duplicated HiveMQ listener name `my-custom-ws-listener`

  - it: with non-exposed WebSocket services and duplicated listener name, validation succeeds
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
          hivemqListenerName: my-custom-ws-listener
        - type: websocket
          exposed: false
          containerPort: 8001
          hivemqListenerName: my-custom-ws-listener
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a secure WebSocket service and a duplicated listener name
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
          keystoreSecretName: "websocket-secret"
          keystoreSecretKey: "keystore.jks"
          keystorePasswordSecretName: "websocket-keystore-password"
          hivemqListenerName: my-custom-secure-ws-listener
        - type: websocket
          exposed: true
          containerPort: 8001
          keystoreSecretName: "websocket-secret"
          keystoreSecretKey: "keystore.jks"
          keystorePasswordSecretName: "websocket-keystore-password"
          hivemqListenerName: my-custom-secure-ws-listener
    asserts:
      - failedTemplate:
          errorPattern: Found duplicated HiveMQ listener name `my-custom-secure-ws-listener`

  - it: with non-exposed secure WebSocket services and duplicated listener name, validation succeeds
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
          keystoreSecretName: "websocket-secret"
          keystoreSecretKey: "keystore.jks"
          keystorePasswordSecretName: "websocket-keystore-password"
          hivemqListenerName: my-custom-secure-ws-listener
        - type: websocket
          exposed: false
          containerPort: 8001
          keystoreSecretName: "websocket-secret"
          keystoreSecretKey: "keystore.jks"
          keystorePasswordSecretName: "websocket-keystore-password"
          hivemqListenerName: my-custom-secure-ws-listener
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a non-secure WebSocket service exposed and TLS protocol set, validation fails
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
          tlsProtocols:
            - TLSv1.2
    asserts:
      - failedTemplate:
          errorPattern: Service type `websocket` with container port `8000` is using `tlsProtocols` value. TLS protocols are only supported by secure services

  - it: with a non-secure WebSocket service non-exposed and TLS protocol set, validation succeeds
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
          tlsProtocols:
            - TLSv1.2
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a non-secure WebSocket service exposed and Cipher suites set, validation fails
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
          tlsCipherSuites:
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    asserts:
      - failedTemplate:
          errorPattern: Service type `websocket` with container port `8000` is using `tlsCipherSuites` value. Cipher suites are only supported by secure services

  - it: with a non-secure WebSocket service non-exposed and Cipher suites set, validation succeeds
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
          tlsCipherSuites:
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a non-secure WebSocket service exposed and Client Authentication Mode set, validation fails
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
          tlsClientAuthenticationMode: "OPTIONAL"
    asserts:
      - failedTemplate:
          errorPattern: Service type `websocket` with container port `8000` is using `tlsClientAuthenticationMode` value. Client Authentication Mode is only supported by secure MQTT or secure WebSocket services

  - it: with a non-secure WebSocket service non-exposed and Client Authentication Mode set, validation succeeds
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
          tlsClientAuthenticationMode: "OPTIONAL"
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1
