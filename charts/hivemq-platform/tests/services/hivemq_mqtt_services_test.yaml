suite: HiveMQ Platform - MQTT services tests
templates:
  - hivemq-custom-resource.yml
release:
  name: test-hivemq-platform
tests:

  - it: with a MQTT service enabled
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].ports[0]
      - contains:
          path: spec.statefulSet.spec.template.spec.containers[0].ports
          content:
            name: mqtt-1884
            containerPort: 1884
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-mqtt-1884
            spec:
              ports:
                - name: mqtt-1884
                  targetPort: mqtt-1884
                  port: 1884

  - it: with a MQTT service disabled, no MQTT service added
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
    asserts:
      - exists:
          path: spec.statefulSet.spec.template.spec.containers[0].ports[0]
      - notContains:
          path: spec.statefulSet.spec.template.spec.containers[0].ports
          content:
            name: mqtt-1884
            containerPort: 1884
      - exists:
          path: spec.services
      - notContains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-mqtt-1884
            spec:
              ports:
                - name: mqtt-1884
                  targetPort: mqtt-1884
                  port: 1884

  - it: with default MQTT service, then no service session affinity set
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-mqtt-1883
            spec:
              ports:
                - name: mqtt-1883
                  targetPort: mqtt-1883
                  port: 1883

  - it: with MQTT service enabled and session affinity `ClientIP`, then service session affinity is `ClientIP`
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          sessionAffinity:
            type: ClientIP
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-mqtt-1884
            spec:
              ports:
                - name: mqtt-1884
                  targetPort: mqtt-1884
                  port: 1884
              sessionAffinity: ClientIP

  - it: with MQTT service enabled and session affinity `None`, then service session affinity is `None`
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          sessionAffinity:
            type: None
    asserts:
      - exists:
          path: spec.services
      - contains:
          path: spec.services
          content:
            metadata:
              name: hivemq-test-hivemq-platform-mqtt-1884
            spec:
              ports:
                - name: mqtt-1884
                  targetPort: mqtt-1884
                  port: 1884
              sessionAffinity: None

  - it: with a non-secure MQTT service exposed and TLS protocol set, validation fails
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          tlsProtocols:
            - TLSv1.2
    asserts:
      - failedTemplate:
          errorPattern: Service type `mqtt` with container port `1884` is using `tlsProtocols` value. TLS protocols are only supported by secure services

  - it: with a non-secure MQTT service non-exposed and TLS protocol set, validation succeeds
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
          tlsProtocols:
            - TLSv1.2
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a non-secure MQTT service exposed and Cipher suites set, validation fails
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          tlsCipherSuites:
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    asserts:
      - failedTemplate:
          errorPattern: Service type `mqtt` with container port `1884` is using `tlsCipherSuites` value. Cipher suites are only supported by secure services

  - it: with a non-secure MQTT service non-exposed and Cipher suites set, validation succeeds
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
          tlsCipherSuites:
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1

  - it: with a non-secure MQTT service exposed and Client Authentication Mode set, validation fails
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          tlsClientAuthenticationMode: "OPTIONAL"
    asserts:
      - failedTemplate:
          errorPattern: Service type `mqtt` with container port `1884` is using `tlsClientAuthenticationMode` value. Client Authentication Mode is only supported by secure MQTT or secure WebSocket services

  - it: with a non-secure MQTT service non-exposed and Client Authentication Mode set, validation succeeds
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
          tlsClientAuthenticationMode: "OPTIONAL"
    asserts:
      - notFailedTemplate: {}
      - hasDocuments:
          count: 1
