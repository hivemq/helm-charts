suite: test HiveMQ Platform configmap
templates:
  - hivemq-configuration.yml
  - hivemq-custom-resource.yml
release:
  name: platform-release
tests:

  - it: with default platform values
    template: hivemq-configuration.yml
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - equal:
          path: data["config.xml"]
          value: |-
            <?xml version="1.0"?>
            <hivemq xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="config.xsd">
              <listeners>
                <tcp-listener>
                  <port>1883</port>
                  <bind-address>0.0.0.0</bind-address>
                </tcp-listener>
              </listeners>
              <cluster>
                <transport>
                  <tcp>
                    <bind-address>0.0.0.0</bind-address>
                    <bind-port>7000</bind-port>
                  </tcp>
                </transport>
                <enabled>true</enabled>
                <discovery>
                  <extension/>
                </discovery>
              </cluster>
              <!-- required and should not be configured different -->
              <health-api>
                <enabled>true</enabled>
                <listeners>
                  <http>
                    <port>8889</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </health-api>
              <!-- -->
              <control-center>
                <listeners>
                  <http>
                    <port>8080</port>
                    <bind-address>0.0.0.0</bind-address>
                  </http>
                </listeners>
              </control-center>
              <anonymous-usage-statistics>
                <enabled>false</enabled>
              </anonymous-usage-statistics>
            </hivemq>

  - it: with create config true
    template: hivemq-configuration.yml
    set:
      config.create: true
      config.overrideContent: "content"
    asserts:
      - isNotNull:
          path: data
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: hivemq-configuration-platform-release
      - equal:
          path: spec.configMapName
          value: hivemq-configuration-platform-release
        template: hivemq-custom-resource.yml

  - it: with a MQTT service exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tcp-listener>.*?<port>1884</port>.*?</tcp-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<port>1884</port>.*?</tls-tcp-listener>"

  - it: with a MQTT service not exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tcp-listener>.*?<port>1884</port>.*?</tcp-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<port>1884</port>.*?</tls-tcp-listener>"

  - it: with a secure MQTT service exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          keystoreSecretName: "mqtt-secret"
          keystoreSecretKey: "keystore.jks"
          tlsClientAuthenticationMode: "OPTIONAL"
          truststoreSecretName: "truststore-secret"
          truststoreSecretKey: "truststore.jks"
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tcp-listener>.*?</tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<port>1884</port>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<path>/tls-mqtt-secret/keystore.jks</path>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<password>\\$\\{mqtt_platform-release_mqtt-secret_keystore_pass}</password>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<private-key-password>\\$\\{mqtt_platform-release_mqtt-secret_keystore_pass}</private-key-password>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<truststore>.*?<path>/tls-truststore-secret/truststore.jks</path>.*?</truststore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<truststore>.*?<password>\\$\\{mqtt_platform-release_truststore-secret_truststore_pass}</password>.*?</truststore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<client-authentication-mode>OPTIONAL</client-authentication-mode>.*?</tls-tcp-listener>"

  - it: with a secure MQTT service not exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: mqtt
          exposed: false
          containerPort: 1884
          keystoreSecretName: "mqtt-secret"
          keystoreSecretKey: "keystore.jks"
          tlsClientAuthenticationMode: "OPTIONAL"
          truststoreSecretName: "truststore-secret"
          truststoreSecretKey: "truststore.jks"
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tcp-listener>.*?<port>1884</port>.*?</tcp-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<port>1884</port>.*?</tls-tcp-listener>"

  - it: with a secure MQTT service exposed using default values
    template: hivemq-configuration.yml
    set:
      services:
        - type: mqtt
          exposed: true
          containerPort: 1884
          keystoreSecretName: "mqtt-secret"
          truststoreSecretName: "truststore-secret"
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tcp-listener>.*?</tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<port>1884</port>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<path>/tls-mqtt-secret/keystore</path>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<password>\\$\\{mqtt_platform-release_mqtt-secret_keystore_pass}</password>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<keystore>.*?<private-key-password>\\$\\{mqtt_platform-release_mqtt-secret_keystore_pass}</private-key-password>.*?</keystore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<truststore>.*?<path>/tls-truststore-secret/truststore</path>.*?</truststore>.*?</tls-tcp-listener>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<truststore>.*?<password>\\$\\{mqtt_platform-release_truststore-secret_truststore_pass}</password>.*?</truststore>.*?</tls-tcp-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-tcp-listener>.*?<client-authentication-mode>.*?</client-authentication-mode>.*?</tls-tcp-listener>"

  - it: with a Control Center service exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: control-center
          exposed: true
          containerPort: 8081
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<control-center>.*?<port>8081</port>.*?</control-center>"

  - it: with a Control Center service not exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: control-center
          exposed: false
          containerPort: 8081
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<control-center>.*?<port>8081</port>.*?</control-center>"

  - it: with a Rest API service exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: rest-api
          exposed: true
          containerPort: 8890
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<rest-api>.*?<port>8890</port>.*?</rest-api>"

  - it: with a Rest API service not exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: rest-api
          exposed: false
          containerPort: 8890
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<rest-api>.*?<port>8890</port>.*?</rest-api>"

  - it: with a WebSocket service exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: websocket
          exposed: true
          containerPort: 8000
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<websocket-listener>.*?<port>8000</port>.*?</websocket-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-websocket-listener>.*?<port>8000</port>.*?</tls-websocket-listener>"

  - it: with a WebSocket service not exposed
    template: hivemq-configuration.yml
    set:
      services:
        - type: websocket
          exposed: false
          containerPort: 8000
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<websocket-listener>.*?<port>8000</port>.*?</websocket-listener>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<tls-websocket-listener>.*?<port>8000</port>.*?</tls-websocket-listener>"

  - it: with Control Center user and password
    template: hivemq-configuration.yml
    set:
      controlCenter.username: "test-username"
      controlCenter.password: "c638833f69bbfb3c267afa0a74434812436b8f08a81fd263c6be6871de4f1265"
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<user>.*?<name>test-username</name>.*?<password>c638833f69bbfb3c267afa0a74434812436b8f08a81fd263c6be6871de4f1265</password>.*?/user>"

  - it: with default Control Center username and password
    template: hivemq-configuration.yml
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<user>.*?<name>test-username</name>.*?<password>test-password</password>.*?/user>"

  - it: with Data Hub enabled
    template: hivemq-configuration.yml
    set:
      config.dataHub.dataValidationEnabled: true
      config.dataHub.behaviorValidationEnabled: true
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<data-validation>.*?<enabled>true</enabled>.*?</data-validation>.*?</data-hub>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<behavior-validation>.*?<enabled>true</enabled>.*?</behavior-validation>.*?</data-hub>"

  - it: with Data Hub disabled
    template: hivemq-configuration.yml
    set:
      config.dataHub.dataValidationEnabled: false
      config.dataHub.behaviorValidationEnabled: false
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?</data-hub>"

  - it: with Data Hub - Data validation enabled only
    template: hivemq-configuration.yml
    set:
      config.dataHub.dataValidationEnabled: true
      config.dataHub.behaviorValidationEnabled: false
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<data-validation>.*?<enabled>true</enabled>.*?</data-validation>.*?</data-hub>"
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<behavior-validation>.*?<enabled>true</enabled>.*?</behavior-validation>.*?</data-hub>"

  - it: with Data Hub - Behavior validation enabled only
    template: hivemq-configuration.yml
    set:
      config.dataHub.dataValidationEnabled: false
      config.dataHub.behaviorValidationEnabled: true
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<data-validation>.*?<enabled>true</enabled>.*?</data-validation>.*?</data-hub>"
      - matchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<behavior-validation>.*?<enabled>true</enabled>.*?</behavior-validation>.*?</data-hub>"

  - it: with Data Hub default
    template: hivemq-configuration.yml
    asserts:
      - isNotNull:
          path: data["config.xml"]
      - notMatchRegex:
          path: data["config.xml"]
          pattern: "(?s)<data-hub>.*?<data-validation>.*?<enabled>true</enabled>.*?</data-validation>.*?<behavior-validation>.*?<enabled>true</enabled>.*?</behavior-validation>.*?</data-hub>"
