# HiveMQ Platform Helm Chart default values
# See documentation for more information: https://docs.hivemq.com/hivemq-platform-operator/configuration.html#install-platform-with-helm

# HiveMQ Platform container image configuration
image:
  repository: docker.io/hivemq
  name: hivemq4
  tag: 4.29.0
  pullPolicy: IfNotPresent
  pullSecretName: ""

# Settings for the HiveMQ Platform nodes
nodes:
  # The number of HiveMQ nodes in the cluster
  replicaCount: 2
  logLevel: INFO
  javaOpts: "-XX:+UnlockExperimentalVMOptions -XX:InitialRAMPercentage=50 -XX:MaxRAMPercentage=50"

  # Annotations to add to the HiveMQ Pods
  annotations: {}

  # Resources, limits and requests are set to equal values.
  # Note: For production use-cases HiveMQ requires a minimum of 4 CPUs and 4G of memory.
  #       See: https://docs.hivemq.com/hivemq/latest/user-guide/system-requirements.html#minimum
  resources:
    cpu: 1024m
    memory: 2048M

  # Holds pod-level security attributes and common container settings.
  # Note: The standard official HiveMQ image hivemq/hivemq4 runs with a non-root user with user ID (UID) "10000" and group ID (GID) "0" (root).
  #       When enabled, this defaults to non-root user with UID "10000" and GID "0".
  #       However, if required, user ID, group ID and filesystem group values can be overwritten. For group ID is
  #       always recommended to use group "0". Example:
  #         podSecurityContext:
  #           enabled: true
  #           runAsNonRoot: true
  #           runAsUser: 10001
  #           runAsGroup: 0
  #           fsGroup: 10002
  podSecurityContext:
    enabled: false
    runAsNonRoot: true

  # Specifies environment variables to be added to the HiveMQ Platform container.
  # Environment variables can be defined as a list of either key-value pairs or
  # using valueFrom to reference a secret or config map.
  env: []
  # - name: <ENV_VAR_NAME_1>
  #   value: <value>
  # - name: <ENV_VAR_NAME_2>
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: my-secret-key
  #       optional: false
  #  - name: <ENV_VAR_NAME_3>
  #    valueFrom:
  #      configMapKeyRef:
  #        name: my-config-map
  #        key: my-configmap-key
  #        optional: true

  # The name of the custom service account to use by the Platform pods.
  # If not set or empty, a default service account is created.
  serviceAccountName: ""

# Configuration options for the default provided HiveMQ configuration (config.xml)
#
# Control Center configuration
controlCenter:
  # The name of the user.
  # Set both values (username and password) to override the default configuration.
  username: ""
  # The password of the user as a SHA256 hash. See password generation here:
  # https://docs.hivemq.com/hivemq/latest/control-center/configuration.html#generate-password
  password: ""

# REST API configuration
restApi:
  # Enables or disables authentication and authorization.
  authEnabled: false

# Configures the HiveMQ License information.
license:
  # Creates a default HiveMQ Platform license as a Kubernetes Secret.
  create: false
  # The name of a secret with the license information.
  # To create a new secret with a license, set create=true. Otherwise, false to reuse an existing one.
  name: ""
  # Inlines the License information as an encoded 64-bytes string.
  data: ""
  # Overrides the License information via file using --set-file license.lic.
  overrideLicense: ""

# Configures HiveMQ restriction options,
# see https://docs.hivemq.com/hivemq/latest/user-guide/restrictions.html
#hivemqRestrictions:
#  maxConnections: -1
#  incomingBandwidthThrottling: 0
#  noConnectIdleTimeout: 10000
#  maxClientIdLength: 65535

# Configures HiveMQ MQTT options:
# see https://docs.hivemq.com/hivemq/latest/user-guide/configuration.html#mqtt-config
#hivemqMqtt:
#  sessionExpiryMaxInterval: 4294967295
#  messageExpiryMaxInterval: 4294967296
#  maxPacketSize: 268435460
#  serverReceiveMaximum: 10
#  keepAliveMax: 65535
#  keepAliveAllowUnlimited: true
#  topicAliasEnabled: true
#  topicAliasMaxPerClient: 5
#  subscriptionIdentifier: true
#  wildcardSubscriptions: true
#  sharedSubscriptions: true
#  maxQualityOfService: 2
#  retainedMessages: true
#  queuedMessagesMaxSize: 1000
#  queuedMessagesStrategy: "discard"

# Configures HiveMQ MQTT Add-on options:
# see https://docs.hivemq.com/hivemq/latest/user-guide/mqtt-add-ons.html
#hivemqMqttAddons:
#  expiredMessagesTopic: false
#  droppedMessagesTopic: false
#  deadMessagesTopic: false

# Configures HiveMQ MQTT security options:
# see https://docs.hivemq.com/hivemq/latest/user-guide/configuration.html#security
#hivemqMqttSecurity:
#  allowEmptyClientId: true
#  payloadFormatValidation: false
#  utf8Validation: true
#  allowRequestProblemInformation: true
#  controlCenterAuditLog: true

# Selector name that is used to match the selector of the managing operator.
# This selector assigns the HiveMQ Platform to a specific operator.
operator:
  selector: nil

# Configures how the HiveMQ platform pods should be scheduled on the Kubernetes worker nodes.
podScheduling:
  # Configures the affinity for the Platform pods
  affinity: {}
  # podAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      - labelSelector:
  #          matchExpressions:
  #            - key: app
  #              operator: In
  #              values:
  #                - my-app
  #        topologyKey: "kubernetes.io/hostname"

  # Configures the tolerations for the Platform pods
  tolerations: []
  #  - key: "example-key"
  #    operator: "Exists"
  #    effect: "NoSchedule"

# Configure exposed Services and ports
# Possible service types are: "control-center", "rest-api", "mqtt", "websocket"
services:
  # MQTT service configuration
  - type: mqtt
    exposed: true
    containerPort: 1883
    # Set if service port is different from container port
    port: 1883
    # Set if different from ClusterIP. Possible values are `ClusterIP`, `NodePort` and `LoadBalancer`
    # serviceType: NodePort
    # Annotations to add to the service
    annotations: {}
  # Secure MQTT service configuration
  - type: mqtt
    exposed: false
    containerPort: 8883
    # The name of the Kubernetes secret that contains the keystore file.
    keystoreSecretName: ""
    # The key of the Kubernetes secret that contains the keystore file. Defaults to `keystore`
    keystoreSecretKey: ""

    # Two options are available to configure secure MQTT listeners:
    # 1. Using base64 encoded passwords configured via Helm chart values, as below
    # The inlined password for the keystore, Base 64 encoded.
    keystorePassword: ""
    # The inlined private key password for the keystore, Base 64 encoded. Defaults to the `keystorePassword` value.
    keystorePrivatePassword: ""

    # 2. Using base64 encoded passwords stored in a Kubernetes secret, as below
    # Alternatively, the name of the Kubernetes secret which contains the keystore password and optionally the private key password for the keystore.
    keystorePasswordSecretName: ""
    # The optional entry key for the keystore password in the Kubernetes secret. Defaults to `keystore.password`
    keystorePasswordSecretKey: ""
    # The optional entry key for the keystore private password in the Kubernetes secret.
    keystorePrivatePasswordSecretKey: ""

    # Mutual TLS configuration values
    # The name of the Kubernetes secret that contains the truststore file.
    truststoreSecretName: ""
    # The key of the Kubernetes secret that contains the truststore file. Defaults to `truststore`
    truststoreSecretKey: ""
    # The inlined password for the truststore, Base 64 encoded.
    truststorePassword: ""
    # Alternatively, the name of the secret with the password, using the key: `truststore.password`.
    truststorePasswordSecretName: ""
    # The way HiveMQ platform authenticates client certificates. Possible values are `NONE`, `OPTIONAL` and `REQUIRED`
    tlsClientAuthenticationMode: "NONE"
  # Control Center service configuration
  - type: control-center
    exposed: true
    containerPort: 8080
  # Secure Control Center service configuration
  - type: control-center
    exposed: false
    containerPort: 8443
    # The name of the Kubernetes secret that contains the keystore file.
    keystoreSecretName: ""
    # The key of the Kubernetes secret that contains the keystore file. Defaults to `keystore`
    keystoreSecretKey: ""

    # Two options are available to configure secure Control Center listeners:
    # 1. Using base64 encoded passwords configured via Helm chart values, as below
    # The inlined password for the keystore, Base 64 encoded.
    keystorePassword: ""
    # The inlined private key password for the keystore, Base 64 encoded. Defaults to the `keystorePassword` value.
    keystorePrivatePassword: ""

    # 2. Using base64 encoded passwords stored in a Kubernetes secret, as below
    # Alternatively, the name of the Kubernetes secret which contains the keystore password and optionally the private key password for the keystore.
    keystorePasswordSecretName: ""
    # The optional entry key for the keystore password in the Kubernetes secret. Defaults to `keystore.password`
    keystorePasswordSecretKey: ""
    # The optional entry key for the keystore private password in the Kubernetes secret.
    keystorePrivatePasswordSecretKey: ""
  # REST API service configuration
  - type: rest-api
    exposed: false
    containerPort: 8888
  # WebSocket service configuration
  - type: websocket
    exposed: false
    containerPort: 8001
  # Secure WebSocket service configuration
  - type: websocket
    exposed: false
    containerPort: 8000
    # The name of the Kubernetes secret that contains the keystore file.
    keystoreSecretName: ""
    # The key of the Kubernetes secret that contains the keystore file. Defaults to `keystore`
    keystoreSecretKey: ""

    # Two options are available to configure secure WebSocket listeners:
    # 1. Using base64 encoded passwords configured via Helm chart values, as below
    # The inlined password for the keystore, Base 64 encoded.
    keystorePassword: ""
    # The inlined private key password for the keystore, Base 64 encoded. Defaults to the `keystorePassword` value.
    keystorePrivatePassword: ""

    # 2. Using base64 encoded passwords stored in a Kubernetes secret, as below
    # Alternatively, the name of the Kubernetes secret which contains the keystore password and optionally the private key password for the keystore.
    keystorePasswordSecretName: ""
    # The optional entry key for the keystore password in the Kubernetes secret. Defaults to `keystore.password`
    keystorePasswordSecretKey: ""
    # The optional entry key for the keystore private password in the Kubernetes secret.
    keystorePrivatePasswordSecretKey: ""

    # Mutual TLS configuration values
    # The name of the Kubernetes secret that contains the truststore file.
    truststoreSecretName: ""
    # The key of the Kubernetes secret that contains the truststore file. Defaults to `truststore`
    truststoreSecretKey: ""
    # The inlined password for the truststore, Base 64 encoded.
    truststorePassword: ""
    # Alternatively, the name of the secret with the password, using the key: `truststore.password`.
    truststorePasswordSecretName: ""
    # The way HiveMQ platform authenticates client certificates. Possible values are `NONE`, `OPTIONAL` and `REQUIRED`
    tlsClientAuthenticationMode: "NONE"

# Configurations and Overrides
# These configurations provide a convenient option to override entire sections with your customized files,
# such as the StatefulSet or the HiveMQ configuration (config.xml)
#
# Note: When overriding default configurations, make sure to include required options into your
#       custom configurations. See the documentation for more.
config:
  # Create a default HiveMQ Platform configuration (config.xml) as a Kubernetes ConfigMap.
  create: true
  # Override the default HiveMQ Platform configuration (config.xml) by providing
  # the name of a Kubernetes ConfigMap that contains the (config.xml). (set create=false).
  name: ""
  # Inlines the HiveMQ Platform configuration (config.xml) from a file:
  # --set-file config.overrideHiveMQConfig=your-config.xml
  # WARNING: When this configuration option is used, all other configuration options for the HiveMQ Platform configuration are ignored.
  overrideHiveMQConfig: ""
  # Inlines the StatefulSet configuration and overrides the default StatefulSet.
  # WARNING: When this configuration option is used, all other configuration options for the StatefulSetSpec configuration are ignored.
  overrideStatefulSet: ""
  # Inlines an init container configuration and adds it to the StatefulSet
  # WARNING: This value is now marked as `deprecated` and will be removed in future releases.
  #          Please, consider using `additionalInitContainers` value instead.
  overrideInitContainers: ""

  # Enables HiveMQ Data Hub
  dataHub:
    dataValidationEnabled: false
    behaviorValidationEnabled: false

# Custom init containers to be added to the HiveMQ platform StatefulSet
additionalInitContainers: []
#  - name: my-custom-init-container
#    image: busybox:latest
#    restartPolicy: Always
#    command: ['sh', '-c', 'tail -F /opt/hivemq/conf-k8s/config.xml']
#    volumeMounts:
#      - name: broker-configuration
#        mountPath: /opt/hivemq/conf-k8s/

# Custom containers to be added to the HiveMQ platform pod
additionalContainers: []
#  - name: my-custom-container
#    image: busybox:latest
#    command: ['sh', '-c', 'tail -F /opt/hivemq/conf-k8s/config.xml']
#    volumeMounts:
#      - name: broker-configuration
#        mountPath: /opt/hivemq/conf-k8s/

# HiveMQ Platform extension configuration
extensions:

# HiveMQ Allow All Extension
# By default, the HiveMQ Platform is installed with this extension to permit all MQTT connections for testing.
# For production, add a security extension and disable this extension.
  - name: hivemq-allow-all-extension
    enabled: true

# HiveMQ Enterprise Extension for Kafka
#  - name: hivemq-kafka-extension
#    enabled: true
#    # The Kafka extension supports hot-reload of the configuration.
#    supportsHotReload: true
#    # The ConfigMap name that contains the Kafka extension configuration.
#    configMapName: ""
#    # The Secret name that contains request headers for the customization download.
#    requestHeaderSecretName: ""
#    # The URI to download a customization for the Kafka extension.
#    customizationUri: ""

# HiveMQ Enterprise Extension for Google Pub/Sub
#  - name: hivemq-google-cloud-pubsub-extension
#    enabled: true
#    # The Google Pub/Sub extension supports hot-reload of the configuration.
#    supportsHotReload: true
#    # The ConfigMap name that contains the Google Pub/Sub extension configuration.
#    configMapName: ""
#    # The Secret name that contains request headers for the customization download.
#    requestHeaderSecretName: ""
#    # The URI to download a customization for the Google Pub/Sub extension.
#    customizationUri: ""

# HiveMQ Enterprise Extension for Amazon Kinesis
#  - name: hivemq-amazon-kinesis-extension
#    enabled: true
#    # The Amazon Kinesis extension supports hot-reload of the configuration.
#    supportsHotReload: true
#    # The ConfigMap name that contains the Amazon Kinesis extension configuration.
#    configMapName: ""
#    # The Secret name that contains request headers for the customization download.
#    requestHeaderSecretName: ""
#    # The URI to download a customization for the Amazon Kinesis extension.
#    customizationUri: ""

# HiveMQ Enterprise Security Extension
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-enterprise-security-extension
#    enabled: true
#    # The ConfigMap name that contains the Security extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Distributed Tracing Extension
#  - name: hivemq-distributed-tracing-extension
#    enabled: true
#    # The Tracing extension supports hot-reload of the configuration.
#    supportsHotReload: true
#    # The ConfigMap name that contains the Tracing extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Extension for MongoDB
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-mongodb-extension
#    enabled: true
#    # The ConfigMap name that contains the MongoDB extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Extension for PostgreSQL
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-mysql-extension
#    enabled: true
#    # The ConfigMap name that contains the PostgreSQL extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Extension for MySQL
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-postgresql-extension
#    enabled: true
#    # The ConfigMap name that contains the MySQL extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Extension for Snowflake
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-snowflake-extension
#    enabled: true
#    # The ConfigMap name that contains the Snowflake extension configuration.
#    configMapName: ""

# HiveMQ Enterprise Bridge Extension
# This extension does not support hot-reload of the configuration.
#  - name: hivemq-bridge-extension
#    enabled: true
#    # The ConfigMap name that contains the Bridge extension configuration.
#    configMapName: ""

# Custom extension
#  - name: custom-extension-id
#    enabled: true
#    # Defines if your custom extension supports hot-reload of its configuration, or a restart is necessary.
#    supportsHotReload: false
#    # The ConfigMap name that contains the extension configuration (mounted into the extension subfolder "conf").
#    configMapName: ""
#    # The Secret name that contains request headers for the custom extension download.
#    requestHeaderSecretName: ""
#    # The URI to download the custom extension (as .zip distribution).
#    extensionUri: ""
#    # Dynamically configures the extension priority value in the "hivemq-extension.xml" file.
#    priority: 1000
#    # Dynamically configures the extension start-priority value in the "hivemq-extension.xml" file.
#    startPriority: 1000

# Map additional volumes from possible types: "configMap", "secret", "emptyDir", "persistentVolumeClaim".
additionalVolumes: []
#  - type: configMap
#    name: configmap-name
#    mountName: mount-name
#    containerName: container-name
#    path: /file/mount/path
#    subPath: ""

# type: Choose a type of volume that you want to mount.
# name: The name used for the Secret, the ConfigMap or the PersistentVolumeClaim to be mounted.
#       It will be used either as the volume name or as the volume mount name when the `mountName` is not present as well.
# mountName: Optional volume name and volume mount name to be used for the StatefulSet Spec.
#       When not present, `name` will be used instead as volume name and as volume mount name.
# containerName: Optional name for the container on which the volume will be mounted on.
#       It defaults to the "hivemq" container.
# path: The path configures the directory to which the volume is mounted in the container.
#       If the directory already exists, then the contents are overwritten!
# subPath: Optional name for the subPath. The generated volume mount path will be a result of concatenating `path` and the `subPath` values together.
#       If a volume is mounted with subPath, then the contents of the directory are not overwritten.
#       However, note that changes to a configmap, for example, mounted via subPath will not be propagated to the container.
#       Therefore, pods have to be restarted.

# List of PersistentVolumeClaims that pods are allowed to reference. Every claim in this list must have at least one matching (by name)
# volumeMount in one container in the StatefulSet template. This can be achieved by defining an `additionalVolumes` entry of type `persistentVolumeClaim`
# with a matching name.
# A claim in this list takes precedence over any volumes in the StatefulSet template with the same name.
volumeClaimTemplates: []
# - kind: PersistentVolumeClaim
#   apiVersion: v1
#   metadata:
#     name: data
#   spec:
#     accessModes:
#       - ReadWriteOnce
#     resources:
#       requests:
#         storage: 100Gi
#     volumeMode: Filesystem
