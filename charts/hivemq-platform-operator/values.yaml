# HiveMQ Platform Operator Helm Chart default values
# See documentation for more information: https://docs.hivemq.com/hivemq-platform-operator/configuration.html#install-operator-with-helm

# Container image configuration
image:
  repository: docker.io/hivemq
  name: hivemq-platform-operator
  tag: 1.6.2
  initImageName: hivemq-platform-operator-init
  pullPolicy: IfNotPresent
  pullSecretName: ""

# Resources, limits and requests are set to equal values.
# Note: Increase resources depending on how many HiveMQ Platforms the Operator manages.
resources:
  cpu: 1000m
  memory: 1Gi
  # Set to specify the ephemeral-storage needed for managing local ephemeral storage in the Operator pod.
  # ephemeralStorage: 1Gi

# Configures the log level, possible values are: "TRACE", "DEBUG", "INFO", "WARN", "ERROR"
logLevel: INFO

# Configures the Operator ports for http/s. These ports provide access to metrics and other services.
http:
  port: 8080
https:
  port: 8443
  # Configures if certificate validation and hostname verification should be skipped for all managed custom resources.
  # These settings are used for all Operator related HTTP clients, e.g. for downloading custom extensions and extension customizations.
  skipCertificateValidation: false
  skipHostnameVerification: false

# Configures the Java JVM runtime options for the process.
javaOpts: "-XX:+UnlockExperimentalVMOptions -XX:InitialRAMPercentage=75 -XX:MaxRAMPercentage=75"

# An optional comma-separated list of namespaces this Operator manages.
# Defaults to watch all namespaces if empty.
namespaces: ""
# Selector name to configure which HiveMQ Platform instances this Operator manages.
# Use the "operator.selector" value in the HiveMQ Platform Helm chart to configure a matching label.
# Note: This option creates an "operator=<my-selector-value>" label selector for the Operator.
selector: ""
# An optional comma-separated list of label selectors that HiveMQ Platform resources must match to be managed by this Operator.
# Use "operator.labels" in the HiveMQ Platform Helm chart to configure matching labels for these label selectors.
selectors: ""

# Annotations to add to the Operator pod.
podAnnotations: {}
# Labels to add to the Operator pod.
podLabels: {}

# Annotations to add to the Operator Service.
serviceAnnotations: {}
# Labels to add to the Operator Service.
serviceLabels: {}

# Configures whether Kubernetes RBAC permissions for the Operator should be created.
rbac:
  create: true

# Configures the ServiceAccount for the Operator.
serviceAccount:
  # Specifies whether a ServiceAccount should be created for the Operator.
  create: true
  # The ServiceAccount name that is used. Defaults to "hivemq-<release name>" if not set.
  name: ""

# Configures the ServiceAccount and RBAC permissions (Role, RoleBinding) the Operator creates for the HiveMQ Platform pods.
hivemqPlatformServiceAccount:
  # Specifies whether a ServiceAccount should be created for all HiveMQ Platforms.
  create: true
  # Specifies whether the ServiceAccount for all HiveMQ Platforms should be validated.
  validate: true
  # The ServiceAccount name that is used for all HiveMQ Platforms.
  # This overrides the default name "hivemq-platform-pod-<platform-name>" the Operator creates.
  # The ServiceAccount can also be overridden in the HiveMQ Platform Helm chart (see nodes.serviceAccountName) for each specific HiveMQ Platform.
  name: ""
  permissions:
    # Specifies whether the RBAC permissions for the ServiceAccount should be created for all HiveMQ Platforms.
    create: true
    # Specifies whether the RBAC permissions for the ServiceAccount for all HiveMQ Platforms should be validated.
    validate: true

# Configures how the Operator reconciles the HiveMQ Platform StatefulSet.
hivemqPlatformStatefulSet:
  # Specifies whether a change of the StatefulSet template metadata should trigger a rolling restart.
  # If this is disabled the rollout of updated annotations and labels to the HiveMQ Platform pods will be delayed until the next rolling restart occurs.
  rollingRestartOnTemplateMetadataChange: false

# Configures how the Operator pod should be scheduled on the Kubernetes cluster nodes.
podScheduling:
  # Configures the affinity for the Operator pod.
  affinity:
  # podAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      - labelSelector:
  #          matchExpressions:
  #            - key: app
  #              operator: In
  #              values:
  #                - my-app
  #        topologyKey: "kubernetes.io/hostname"

  # Configures the tolerations for the Operator pod.
  tolerations:
  #  - key: "example-key"
  #    operator: "Exists"
  #    effect: "NoSchedule"

# TLS configuration for the Operator to access the Kubernetes API.
tls:
  # Name of the Secret that contains keystore and truststore.
  secretName: ""
  # The keystore password. Can also be set as "keystore.password" in the Secret.
  keystorePassword: ""
  # The truststore password. Can also be set as "truststore.password" in the Secret.
  truststorePassword: ""

# Configures pod-level security for the HiveMQ Platform Operator pod.
# When enabled, this defaults to non-root user with user ID (UID) "185" and group ID (GID) "0".
# However, if required, user ID, group ID and filesystem group values can be overwritten.
# For group ID is always recommended to use group "0". Example:
#   podSecurityContext:
#     enabled: true
#     runAsNonRoot: true
#     runAsUser: 185
#     runAsGroup: 0
#     fsGroup: 186
podSecurityContext:
  enabled: false
  runAsNonRoot: true

# Configures container security for the Operator container.
# Note that some fields are present in both SecurityContext and PodSecurityContext Kubernetes specification and when both are set,
# the values in SecurityContext take precedence.
containerSecurityContext: {}

# Specifies environment variables to be added to the Operator container.
# Environment variables can be defined as a list of either key-value pairs or
# using valueFrom to reference a Secret or ConfigMap.
env: []
  # - name: <ENV_VAR_NAME1>
  #   value: <value>
  # - name: <ENV_VAR_NAME2>
  #   valueFrom:
  #     secretKeyRef:
  #       name: mysecret
  #       key: mysecretkey
  #       optional: false
  #  - name: <ENV_VAR_NAME3>
  #    valueFrom:
  #      configMapKeyRef:
  #        name: myconfigmap
  #        key: myconfigmapkey
  #        optional: true

# CustomResourceDefinition configuration options.
crd:
  # Enables the CustomResourceDefinition creation in the Kubernetes cluster by the Operator.
  apply: true
  # Waits for the CustomResourceDefinition to become ready once installed.
  waitReady: true
  # Waiting timeout for the CustomResourceDefinition to become ready once installed.
  # Format is based on the ISO-8601 Duration format.
  waitTimeout: PT10S

# Enables the ServiceMonitor resource and Grafana dashboard creation for the operator.
monitoring:
  # Defines whether the monitoring configuration for the HiveMQ Platform Operator is enabled. The default setting is `false`.
  enabled: false
  # Dashboard configuration options.
  dashboard:
    # Boolean value that configures whether to use the default HiveMQ Platform Operator Grafana dashboard ConfigMap. The default setting is `true`.
    create: true
    # Namespace where to deploy the Grafana dashboard ConfigMap. Defaults to the namespace of the HiveMQ Platform Operator.
    # namespace: monitoring
    # Sets the Grafana dashboard content for the HiveMQ Platform Operator Grafana dashboard ConfigMap with your own JSON file from a specified path.
    overrideDashboard: ""
  # Prometheus ServiceMonitor configuration options.
  serviceMonitor:
    # Namespace where to deploy the ServiceMonitor. Defaults to the namespace of the HiveMQ Platform Operator.
    # namespace: monitoring
    # Helm chart release name of the Prometheus Monitoring stack installed. Defaults to the HiveMQ Platform Operator Helm chart release name.
    # releaseName: monitoring-stack
    # Defines how often Prometheus scrapes metrics from the operator endpoints.
    # Example of a valid format are `1d`, `1h30m`, `5m`, `10s`. Defaults to 15 seconds.
    interval: 15s
    # Defines the maximum duration allowed for scraping metrics from the endpoints defined in the ServiceMonitor resource.
    # Example of a valid format are `1d`, `1h30m`, `5m`, `10s`. Defaults to 10 seconds.
    scrapeTimeout: 10s
