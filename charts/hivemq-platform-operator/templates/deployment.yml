apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hivemq-platform-operator.name" (dict "releaseName" .Release.Name) }}
  labels:
    {{- include "hivemq-platform-operator.labels" . | nindent 4 }}
spec:
  # The Operator cannot have more than one replica
  replicas: 1
  selector:
    matchLabels:
      {{- include "hivemq-platform-operator.selector-labels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "hivemq-platform-operator.selector-labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      {{- $podSecurityContext := .Values.podSecurityContext }}
      {{- include "hivemq-platform-operator.validate-run-as-user-security-context" $podSecurityContext }}
      securityContext:
        {{- include "hivemq-platform-operator.generate-run-as-security-context" (dict "securityContext" $podSecurityContext "indentation" 8) }}
        {{- if hasKey $podSecurityContext "fsGroup" }}
        fsGroup: {{ $podSecurityContext.fsGroup }}
        {{- end }}
        fsGroupChangePolicy: "OnRootMismatch"
        {{- $filteredPodSecurityContext := omit $podSecurityContext "enabled" "fsGroup" "runAsGroup" "runAsNonRoot" "runAsUser" }}
        {{- if gt (len $filteredPodSecurityContext) 0 }}
        {{- toYaml $filteredPodSecurityContext | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- with .Values.podScheduling.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podScheduling.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: hivemq-platform-operator
          env:
            - name: JAVA_OPTS
              value: {{.Values.javaOpts | quote }}
            {{- if .Values.namespaces }}
            - name: QUARKUS_OPERATOR_SDK_CONTROLLERS_HIVEMQ_CONTROLLER_NAMESPACES
              value: {{ .Values.namespaces }}
            {{- end }}
            {{- /* `nil` check needed for backward compatibility */ -}}
            {{- if and (ne .Values.selector "nil") (.Values.selector) }}
            - name: QUARKUS_OPERATOR_SDK_CONTROLLERS_HIVEMQ_CONTROLLER_SELECTOR
              value: operator={{ .Values.selector }}
            {{- else if .Values.selectors }}
            - name: QUARKUS_OPERATOR_SDK_CONTROLLERS_HIVEMQ_CONTROLLER_SELECTOR
              value: {{ .Values.selectors }}
            {{- end }}
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HIVEMQ_PLATFORM_OPERATOR_RELEASE_NAME
              value: "{{ .Release.Name }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_APPLY
              value: "{{ .Values.crd.apply }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY
              value: "{{ .Values.crd.waitReady }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY_TIMEOUT
              value: "{{ .Values.crd.waitTimeout }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE
              value: "{{ .Values.image.repository}}/{{ .Values.image.initImageName}}:{{.Values.image.tag}}"
            - name: HIVEMQ_PLATFORM_OPERATOR_IMAGE_PULL_SECRET
              value: "{{ .Values.image.pullSecretName }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_LOG_LEVEL
              value: "{{ .Values.logLevel }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_LOG_CONFIGURATION
              value: "{{ .Values.logConfiguration | default "false"}}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_CREATE
              value: "{{ .Values.hivemqPlatformServiceAccount.create }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_VALIDATE
              value: "{{ .Values.hivemqPlatformServiceAccount.validate }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_NAME
              value: "{{ .Values.hivemqPlatformServiceAccount.name }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_CREATE
              value: "{{ .Values.hivemqPlatformServiceAccount.permissions.create }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_VALIDATE
              value: "{{ .Values.hivemqPlatformServiceAccount.permissions.validate }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_STATEFULSET_ROLLING_RESTART_ON_TEMPLATE_METADATA_CHANGE
              value: "{{ .Values.hivemqPlatformStatefulSet.rollingRestartOnTemplateMetadataChange }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_QUARKUS_LOG_LEVEL
              value: "{{ .Values.quarkusLogLevel | default "INFO" }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SDK_LOG_LEVEL
              value: "{{ .Values.sdkLogLevel | default "INFO" }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_NETWORK_LOG_LEVEL
              value: "{{ .Values.networkLogLevel | default "WARN" }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_CERTIFICATE_VALIDATION
              value: "{{ .Values.https.skipCertificateValidation | default false }}"
            - name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_HOSTNAME_VERIFICATION
              value: "{{ .Values.https.skipHostnameVerification | default false }}"
            - name: QUARKUS_HTTP_PORT
              value: "{{ .Values.http.port }}"
            - name: QUARKUS_HTTP_SSL_PORT
              value: "{{ .Values.https.port }}"
            {{- /* `nil` check needed for backward compatibility */ -}}
            {{- if and (ne .Values.tls.secretName "nil") (.Values.tls.secretName) }}
            - name: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_FILE_TYPE
              value: "JKS"
            - name: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_FILE
              value: "/mnt/tls/keystore.jks"
            - name: QUARKUS_HTTP_SSL_CERTIFICATE_TRUST_STORE_FILE
              value: "/mnt/tls/truststore.jks"
            - name: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD
              {{- /* `nil` check needed for backward compatibility */ -}}
              {{- if and (ne .Values.tls.keystorePassword "nil") (.Values.tls.keystorePassword) }}
              value: "{{ .Values.tls.keystorePassword }}"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.tls.secretName }}
                  key: keystore.password
              {{- end }}
            - name: QUARKUS_HTTP_SSL_CERTIFICATE_TRUST_STORE_PASSWORD
              {{- /* `nil` check needed for backward compatibility */ -}}
              {{- if and (ne .Values.tls.truststorePassword "nil") (.Values.tls.truststorePassword) }}
              value: "{{ .Values.tls.truststorePassword }}"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.tls.secretName }}
                  key: truststore.password
              {{- end }}
            {{- end }}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository}}/{{ .Values.image.name }}:{{.Values.image.tag}}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: {{ .Values.http.port }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          ports:
            - name: {{ printf "http-%s" .Release.Name | lower | trunc 15 | trimSuffix "-" }}
              containerPort: {{ .Values.http.port }}
              protocol: TCP
            - name: {{ printf "https-%s" .Release.Name | lower | trunc 15 | trimSuffix "-" }}
              containerPort: {{ .Values.https.port }}
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: {{ .Values.http.port }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {{- if hasKey .Values.resources "overrideLimits" }}
            {{- with .Values.resources.overrideLimits }}
            limits:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            {{- else }}
            limits:
              cpu: {{ .Values.resources.cpu | trim }}
              memory: {{ .Values.resources.memory | trim }}
              {{- with .Values.resources.ephemeralStorage }}
              ephemeral-storage: {{ . | trim }}
              {{- end }}
            {{- end }}
            requests:
              cpu: {{ .Values.resources.cpu | trim }}
              memory: {{ .Values.resources.memory | trim }}
              {{- with .Values.resources.ephemeralStorage }}
              ephemeral-storage: {{ . | trim }}
              {{- end }}
          {{- /* `nil` check needed for backward compatibility */ -}}
          {{- if and (ne .Values.tls.secretName "nil") (.Values.tls.secretName) }}
          volumeMounts:
            - name: tls
              mountPath: /mnt/tls
              readOnly: true
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          {{- $containerSecurityContext := . }}
          {{- include "hivemq-platform-operator.validate-run-as-user-security-context" $containerSecurityContext }}
          securityContext:
            {{- include "hivemq-platform-operator.generate-run-as-security-context" (dict "securityContext" $containerSecurityContext "indentation" 12) }}
            {{- $filteredContainerSecurityContext := omit $containerSecurityContext "runAsGroup" "runAsNonRoot" "runAsUser" }}
            {{- if gt (len $filteredContainerSecurityContext) 0 }}
            {{- toYaml $filteredContainerSecurityContext | nindent 12 }}
            {{- end }}
          {{- end }}
      {{- if .Values.image.pullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      {{- end }}
      serviceAccountName: {{ include "hivemq-platform-operator.serviceAccountName" . }}
      {{- /* `nil` check needed for backward compatibility */ -}}
      {{- if and (ne .Values.tls.secretName "nil") (.Values.tls.secretName) }}
      volumes:
        - name: tls
          secret:
            secretName: "{{ .Values.tls.secretName }}"
      {{- end }}
