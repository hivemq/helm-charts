suite: HiveMQ Platform Operator deployment tests
templates:
  - deployment.yml
tests:

  - it: with image override
    set:
      image.repository: test-repo
      image.name: test-image
      image.tag: test-tag
      image.initImageName: test-init-image
      logLevel: WARN
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - isKind:
          of: Deployment
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.log.level
            value: "WARN"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "test-repo/test-image:test-tag"
      - exists:
          path: spec.template.spec.containers[0].livenessProbe
      - exists:
          path: spec.template.spec.containers[0].readinessProbe
      - exists:
          path: spec.template.spec.containers[0].resources

  - it: with environment variables override for init container
    set:
      image.repository: test-repo
      image.tag: test-tag
      image.initImageName: test-init-image
      image.pullSecretName: test-pull-secret-name
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.init.image
            value: "test-repo/test-init-image:test-tag"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.image.pull.secret
            value: "test-pull-secret-name"

  - it: with custom environment variables for the operator container
    values:
      - custom-env-vars-values.yaml
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR1
            value: "mycustomvalue1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR2
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: mysecretkey
                optional: false
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR3
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: myconfigmapkey
                optional: true

  - it: with defaults, no pod security context set
    asserts:
      - notExists:
          path: spec.template.spec.securityContext

  - it: with default pod security context enabled, then default pod security context set
    set:
      podSecurityContext.enabled: true
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with custom pod security context using non-root user values, then custom pod security context set
    set:
      podSecurityContext:
        enabled: true
        runAsUser: 5000
        runAsGroup: 5001
        fsGroup: 5002
        runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 5001
      - exists:
          path: spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 5002
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with pod security context root user values, then pod security context set
    set:
      podSecurityContext:
        enabled: true
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 10003
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - exists:
          path: spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 10003
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with only pod security context runAsNonRoot false, then no more pod security context values are needed
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with additional custom pod security context values, then custom pod security context set
    set:
      podSecurityContext:
        enabled: true
        supplementalGroups: [4000]
        supplementalGroupsPolicy: Strict
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"
      - exists:
          path: spec.template.spec.securityContext.supplementalGroups
      - equal:
          path: spec.template.spec.securityContext.supplementalGroups
          value: [4000]
      - exists:
          path: spec.template.spec.securityContext.supplementalGroupsPolicy
      - equal:
          path: spec.template.spec.securityContext.supplementalGroupsPolicy
          value: Strict

  - it: with pod security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: false
        runAsUser: 185
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` (root)

  - it: with pod security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 0
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` (root)

  - it: with defaults, no container security context set
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - notExists:
          path: spec.template.spec.containers[0].securityContext

  - it: with custom container security context using non-root user values, then custom container security context set
    set:
      containerSecurityContext:
        runAsUser: 5000
        runAsGroup: 5001
        runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 5001

  - it: with container security context root user values, then container security context set
    set:
      containerSecurityContext:
        runAsUser: 0
        runAsGroup: 0
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only container security context runAsNonRoot false, then no more container security context values are needed
    set:
      containerSecurityContext.runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: when only setting container security context runAsNonRoot to true, then no more container security context values are needed
    set:
      containerSecurityContext.runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only custom container security context runAsUser value, then only security context set for runAsUser
    set:
      containerSecurityContext.runAsUser: 5000
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with only custom container security context runAsGroup value, then only security context set for runAsGroup
    set:
      containerSecurityContext.runAsGroup: 10002
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 10002

  - it: with only custom container security context runAsUser and runAsGroup value, then only security context set for runAsUser and runAsGroup
    set:
      containerSecurityContext:
        runAsUser: 5000
        runAsGroup: 5001
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 5001

  - it: with additional custom container security context values, then custom container security context set
    set:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.capabilities
      - isSubset:
          path: spec.template.spec.containers[0].securityContext.capabilities
          content:
            drop:
              - ALL
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with container security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      containerSecurityContext:
        runAsNonRoot: false
        runAsUser: 185
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` (root)

  - it: with container security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      containerSecurityContext:
        runAsNonRoot: true
        runAsUser: 0
    asserts:
      - failedTemplate:
          errorMessage: |-
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` (root)


  - it: with pod scheduling values set
    values:
      - pod-scheduling-values.yaml
    asserts:
      - exists:
          path: spec.template.spec.affinity
      - isSubset:
          path: spec.template.spec.affinity
          content:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - my-app
                  topologyKey: "kubernetes.io/hostname"
      - exists:
          path: spec.template.spec.tolerations
      - contains:
          path: spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: my-key
            operator: Exists

  - it: with default platform service account settings
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.create
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.validate
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.name
            value: ""
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.permissions.create
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.permissions.validate
            value: "true"

  - it: with platform service account create disabled
    set:
      hivemqPlatformServiceAccount.create: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.create
            value: "false"

  - it: with platform service account validate disabled
    set:
      hivemqPlatformServiceAccount.validate: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.validate
            value: "false"

  - it: with platform service account name set
    set:
      hivemqPlatformServiceAccount.name: "my-serviceaccount-name"
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.name
            value: "my-serviceaccount-name"

  - it: with platform service account permissions create disabled
    set:
      hivemqPlatformServiceAccount.permissions.create: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.permissions.create
            value: "false"

  - it: with platform service account permissions validate disabled
    set:
      hivemqPlatformServiceAccount.permissions.validate: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.serviceaccount.permissions.validate
            value: "false"

  - it: with platform statefulset rolling-restart-on-template-metadata-change enabled
    set:
      hivemqPlatformStatefulSet.rollingRestartOnTemplateMetadataChange: true
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.statefulset.rolling-restart-on-template-metadata-change
            value: "true"

  - it: with platform statefulset rolling-restart-on-template-metadata-change disabled
    set:
      hivemqPlatformStatefulSet.rollingRestartOnTemplateMetadataChange: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.statefulset.rolling-restart-on-template-metadata-change
            value: "false"

  - it: with default resource requests
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage

  - it: with custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 1M

  - it: with override resource limits and default resource requests
    set:
      resources.overrideLimits:
        cpu: 2c
        memory: 2m
        ephemeral-storage: 2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 2c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 2M

  - it: with override resource limits and custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
      resources.overrideLimits:
        cpu: 2c
        memory: 2m
        ephemeral-storage: 2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 2c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 2M

  - it: with empty override resource limits
    set:
      resources.overrideLimits: {}
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - notExists:
          path: spec.template.spec.containers[0].resources.limits

  - it: with empty override resource limits and custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
      resources.overrideLimits: {}
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - notExists:
          path: spec.template.spec.containers[0].resources.limits

  - it: with default values, no selector environment variable is set
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: quarkus.operator-sdk.controllers.hivemq-controller.selector

  - it: with nil selector value set, no selector environment variable is set
    set:
      selector: nil
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: quarkus.operator-sdk.controllers.hivemq-controller.selector

  - it: with custom selector value set, selector environment variable is set
    set:
      selector: foobar
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: quarkus.operator-sdk.controllers.hivemq-controller.selector
            value: "operator=foobar"

  - it: with default CRD values
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.apply
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.wait-until-ready
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.wait-until-ready.timeout
            value: "PT10S"

  - it: with custom CRD values
    set:
      crd:
        apply: false
        waitReady: false
        waitTimeout: PT2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.apply
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.wait-until-ready
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.crd.wait-until-ready.timeout
            value: "PT2M"

  - it: with invalid duration format for CRD wait timeout, then schema validation fails
    set:
      crd:
        waitTimeout: P1S
    asserts:
      - failedTemplate: {}

  - it: with default values, skip HTTPS certificate validation and hostname verification are disabled
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-certificate-validation
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-hostname-verification
            value: "false"

  - it: with skip HTTPS certificate validation
    set:
      https.skipCertificateValidation: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-hostname-verification
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-certificate-validation
            value: "true"

  - it: with skip HTTPS hostname verification
    set:
      https.skipHostnameVerification: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-hostname-verification
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: hivemq.platform.operator.skip-https-certificate-validation
            value: "false"
