suite: HiveMQ Platform Operator - Deployment tests
templates:
  - deployment.yml
release:
  name: operator
  namespace: hivemq-platform-operator-namespace
chart:
  version: 0.0.1
  appVersion: 1.0.0
tests:

  - it: with default values, default Deployment created
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
          name: hivemq-operator

  - it: with default values, default labels created
    asserts:
      - isSubset:
          path: metadata.labels
          content:
            helm.sh/chart: hivemq-platform-operator-0.0.1
            app.kubernetes.io/name: hivemq-platform-operator
            app.kubernetes.io/instance: operator
            app.kubernetes.io/version: 1.0.0
            app.kubernetes.io/managed-by: Helm

  - it: with default values, no annotations created
    asserts:
      - notExists:
          path: metadata.annotations

  - it: with default values, default template labels created
    asserts:
      - exists:
          path: spec.template.metadata.labels
      - isSubset:
          path: spec.template.metadata.labels
          content:
            app.kubernetes.io/instance: operator
            app.kubernetes.io/name: hivemq-platform-operator

  - it: with default values, default EnvVars created
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: JAVA_OPTS
              value: "-XX:+UnlockExperimentalVMOptions -XX:InitialRAMPercentage=75 -XX:MaxRAMPercentage=75"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HIVEMQ_PLATFORM_OPERATOR_RELEASE_NAME
              value: "operator"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_APPLY
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY_TIMEOUT
              value: "PT10S"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE
              value: "docker.io/hivemq/hivemq-platform-operator-init:1.7.2"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_PULL_POLICY
              value: "IfNotPresent"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
              value: "250m"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
              value: "100Mi"
            - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
              value: "1Gi"
            - name: HIVEMQ_PLATFORM_OPERATOR_IMAGE_PULL_SECRET
              value: ""
            - name: HIVEMQ_PLATFORM_OPERATOR_LOG_LEVEL
              value: "INFO"
            - name: HIVEMQ_PLATFORM_OPERATOR_LOG_CONFIGURATION
              value: "false"
            - name: HIVEMQ_PLATFORM_OPERATOR_PLATFORM_HEALTH_DETAILS_FORMAT
              value: "plain"
            - name: HIVEMQ_PLATFORM_OPERATOR_RECONCILIATION_ROLLING_RESTART_CONCURRENT
              value: "0"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_CREATE
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_VALIDATE
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_NAME
              value: ""
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_CREATE
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_VALIDATE
              value: "true"
            - name: HIVEMQ_PLATFORM_OPERATOR_SDK_LOG_LEVEL
              value: "INFO"
            - name: HIVEMQ_PLATFORM_OPERATOR_NETWORK_LOG_LEVEL
              value: "WARN"
            - name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_CERTIFICATE_VALIDATION
              value: "false"
            - name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_HOSTNAME_VERIFICATION
              value: "false"
            - name: HIVEMQ_PLATFORM_OPERATOR_HTTP_PORT
              value: "8080"
            - name: HIVEMQ_PLATFORM_OPERATOR_HTTP_SSL_PORT
              value: "8443"

  - it: with default values, no template annotations created
    asserts:
      - notExists:
          path: spec.template.metadata.annotations

  - it: with custom labels, custom template labels created
    set:
      podLabels:
        foo: bar
        bar: baz
    asserts:
      - exists:
          path: spec.template.metadata.labels
      - isSubset:
          path: spec.template.metadata.labels
          content:
            foo: bar
            bar: baz

  - it: with custom annotations, custom template annotations created
    set:
      podAnnotations:
        foo: bar
        bar: baz
    asserts:
      - exists:
          path: spec.template.metadata.annotations
      - isSubset:
          path: spec.template.metadata.annotations
          content:
            foo: bar
            bar: baz

  - it: with max of 53 chars for Helm release name, Deployment name not truncated
    release:
      name: a-very-looooong-hivemq-platform-operator-release-name
    asserts:
      - equal:
          path: metadata.name
          value: hivemq-a-very-looooong-hivemq-platform-operator-release-name

  - it: with image override
    set:
      image.repository: test-repo
      image.name: test-image
      image.tag: test-tag
      image.initImageName: test-init-image
      logLevel: WARN
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - isKind:
          of: Deployment
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_LOG_LEVEL
            value: "WARN"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "test-repo/test-image:test-tag"
      - exists:
          path: spec.template.spec.containers[0].livenessProbe
      - exists:
          path: spec.template.spec.containers[0].readinessProbe
      - exists:
          path: spec.template.spec.containers[0].resources

  - it: with custom concurrentRollingRestartLimit, operator container EnvVar created
    set:
      concurrentRollingRestartLimit: 5
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_RECONCILIATION_ROLLING_RESTART_CONCURRENT
            value: "5"

  - it: with empty concurrentRollingRestartLimit, operator container EnvVar created empty
    set:
      concurrentRollingRestartLimit:
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_RECONCILIATION_ROLLING_RESTART_CONCURRENT
            value: ""

  - it: with invalid concurrentRollingRestartLimit, schema validation fails
    set:
      concurrentRollingRestartLimit: -1
    asserts:
      - failedTemplate: {}

  - it: with custom hivemqPlatformHealthDetailsFormat, operator container EnvVar created
    set:
      hivemqPlatformHealthDetailsFormat: json
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_PLATFORM_HEALTH_DETAILS_FORMAT
            value: "json"

  - it: with empty hivemqPlatformHealthDetailsFormat, operator container EnvVar created empty
    set:
      hivemqPlatformHealthDetailsFormat:
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_PLATFORM_HEALTH_DETAILS_FORMAT
            value: ""

  - it: with invalid hivemqPlatformHealthDetailsFormat, schema validation fails
    set:
      hivemqPlatformHealthDetailsFormat: invalid
    asserts:
      - failedTemplate: {}

  - it: with logLevel enabled, operator container EnvVar created
    set:
      logLevel: WARN
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_LOG_LEVEL
            value: "WARN"

  - it: with empty logLevel, operator container EnvVar created empty
    set:
      logLevel:
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_LOG_LEVEL
            value: ""

  - it: with invalid logLevel, schema validation fails
    set:
      logLevel: INVALID
    asserts:
      - failedTemplate: {}

  - it: with logConfiguration enabled, operator container EnvVar created
    set:
      logConfiguration: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_LOG_CONFIGURATION
            value: "true"

  - it: with invalid logConfiguration, schema validation fails
    set:
      logConfiguration: "invalid-value"
    asserts:
      - failedTemplate: {}

  - it: with networkLogLevel enabled, operator container EnvVar created
    set:
      networkLogLevel: DEBUG
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_NETWORK_LOG_LEVEL
            value: "DEBUG"

  - it: with invalid networkLogLevel, schema validation fails
    set:
      networkLogLevel: INVALID
    asserts:
      - failedTemplate: {}

  - it: with sdkLogLevel enabled, operator container EnvVar created
    set:
      sdkLogLevel: ERROR
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SDK_LOG_LEVEL
            value: "ERROR"

  - it: with invalid networkLogLevel, schema validation fails
    set:
      sdkLogLevel: INVALID
    asserts:
      - failedTemplate: {}

  - it: with environment variables override for init container
    set:
      image.repository: test-repo
      image.tag: test-tag
      image.initImageName: test-init-image
      image.pullSecretName: test-pull-secret-name
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE
            value: "test-repo/test-init-image:test-tag"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_IMAGE_PULL_SECRET
            value: "test-pull-secret-name"

  - it: with custom environment variables for the operator container
    values:
      - custom-env-vars-values.yaml
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR1
            value: "mycustomvalue1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR2
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: mysecretkey
                optional: false
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MY_CUSTOM_ENV_VAR3
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: myconfigmapkey
                optional: true

  - it: with duplicated custom environment variables for the operator init cpu resource, validation fails
    set:
      env:
        - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
          value: 250m
    asserts:
      - failedTemplate:
          errorPattern: Default environment variable `HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU` for the HiveMQ Platform Operator is not allowed to be set via `.env` value. Please use the corresponding values instead.

  - it: with duplicated custom environment variables for the operator init memory resource, validation fails
    set:
      env:
        - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
          value: 100Mi
    asserts:
      - failedTemplate:
          errorPattern:  Default environment variable `HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY` for the HiveMQ Platform Operator is not allowed to be set via `.env` value. Please use the corresponding values instead.

  - it: with duplicated custom environment variables for the operator init ephemeral-storage resource, validation fails
    set:
      env:
        - name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
          value: 1Gi
    asserts:
      - failedTemplate:
          errorPattern: Default environment variable `HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE` for the HiveMQ Platform Operator is not allowed to be set via `.env` value. Please use the corresponding values instead.

  - it: with duplicated custom environment variables, validation fails
    set:
      env:
        - name: foo-bar
          value: abc
        - name: foo-bar
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: mysecretkey
              optional: false
    asserts:
      - failedTemplate:
          errorPattern: Duplicated environment variable `foo-bar` found in the `.Values.env` value.

  - it: with default values, default operator init container resources EnvVars set
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
            value: "250m"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
            value: "100Mi"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
            value: "1Gi"

  - it: with custom operator init container resources, operator init container resources EnvVars set
    set:
      hivemqPlatformInitContainer:
        resources:
          cpu: 1m
          memory: 2Gi
          ephemeralStorage: 3Gi
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
            value: "1m"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
            value: "2Gi"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
            value: "3Gi"

  - it: with no operator init container settings, operator init container resources EnvVars not set
    set:
      hivemqPlatformInitContainer: {}
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE

  - it: with empty operator init container resources, operator init container resources EnvVars not set
    set:
      hivemqPlatformInitContainer:
        resources: {}
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE

  - it: with empty operator init container cpu resource, operator init container CPU resources EnvVar not set
    set:
      hivemqPlatformInitContainer:
        resources:
          cpu: ""
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
            value: "100Mi"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
            value: "1Gi"

  - it: with empty operator init container memory resource, operator init container memory resources EnvVar not set
    set:
      hivemqPlatformInitContainer:
        resources:
          memory: ""
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
            value: "250m"
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE
            value: "1Gi"

  - it: with empty operator init container ephemeral-storage resource, operator init container ephemeral-storage resources EnvVar not set
    set:
      hivemqPlatformInitContainer:
        resources:
          ephemeralStorage: ""
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_CPU
            value: "250m"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_MEMORY
            value: "100Mi"
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_INIT_IMAGE_RESOURCES_EPHEMERAL_STORAGE

  - it: with defaults, no pod security context set
    asserts:
      - notExists:
          path: spec.template.spec.securityContext

  - it: with default pod security context enabled, then default pod security context set
    set:
      podSecurityContext.enabled: true
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with custom pod security context using non-root user values, then custom pod security context set
    set:
      podSecurityContext:
        enabled: true
        runAsUser: 5000
        runAsGroup: 5001
        fsGroup: 5002
        runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 5001
      - exists:
          path: spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 5002
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with pod security context root user values, then pod security context set
    set:
      podSecurityContext:
        enabled: true
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 10003
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - exists:
          path: spec.template.spec.securityContext.fsGroup
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 10003
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with only pod security context runAsNonRoot false, then no more pod security context values are needed
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"

  - it: with additional custom pod security context values, then custom pod security context set
    set:
      podSecurityContext:
        enabled: true
        supplementalGroups: [4000]
        supplementalGroupsPolicy: Strict
    asserts:
      - exists:
          path: spec.template.spec.securityContext
      - exists:
          path: spec.template.spec.securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.securityContext.runAsUser
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.securityContext.runAsGroup
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 0
      - notExists:
          path: spec.template.spec.securityContext.fsGroup
      - exists:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
      - equal:
          path: spec.template.spec.securityContext.fsGroupChangePolicy
          value: "OnRootMismatch"
      - exists:
          path: spec.template.spec.securityContext.supplementalGroups
      - equal:
          path: spec.template.spec.securityContext.supplementalGroups
          value: [4000]
      - exists:
          path: spec.template.spec.securityContext.supplementalGroupsPolicy
      - equal:
          path: spec.template.spec.securityContext.supplementalGroupsPolicy
          value: Strict

  - it: with pod security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: false
        runAsUser: 185
    asserts:
      - failedTemplate:
          errorPattern: |- # FIXME: |- character can be removed once the Helm Unittest plugin issue is fixed https://github.com/helm-unittest/helm-unittest/issues/499 
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` \(root\)

  - it: with pod security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      podSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 0
    asserts:
      - failedTemplate:
          errorPattern: |- # FIXME: |- character can be removed once the Helm Unittest plugin issue is fixed https://github.com/helm-unittest/helm-unittest/issues/499
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` \(root\)

  - it: with defaults, no container security context set
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - notExists:
          path: spec.template.spec.containers[0].securityContext

  - it: with custom container security context using non-root user values, then custom container security context set
    set:
      containerSecurityContext:
        runAsUser: 5000
        runAsGroup: 5001
        runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 5001

  - it: with container security context root user values, then container security context set
    set:
      containerSecurityContext:
        runAsUser: 0
        runAsGroup: 0
        runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only container security context runAsNonRoot false, then no more container security context values are needed
    set:
      containerSecurityContext.runAsNonRoot: false
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 0
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: when only setting container security context runAsNonRoot to true, then no more container security context values are needed
    set:
      containerSecurityContext.runAsNonRoot: true
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 185
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 0

  - it: with only custom container security context runAsUser value, then only security context set for runAsUser
    set:
      containerSecurityContext.runAsUser: 5000
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with only custom container security context runAsGroup value, then only security context set for runAsGroup
    set:
      containerSecurityContext.runAsGroup: 10002
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 10002

  - it: with only custom container security context runAsUser and runAsGroup value, then only security context set for runAsUser and runAsGroup
    set:
      containerSecurityContext:
        runAsUser: 5000
        runAsGroup: 5001
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 5000
      - exists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 5001

  - it: with additional custom container security context values, then custom container security context set
    set:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].securityContext
      - exists:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - exists:
          path: spec.template.spec.containers[0].securityContext.capabilities
      - isSubset:
          path: spec.template.spec.containers[0].securityContext.capabilities
          content:
            drop:
              - ALL
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsUser
      - notExists:
          path: spec.template.spec.containers[0].securityContext.runAsGroup

  - it: with container security context runAsNonRoot false, and runAsUser is different than root, then validation fails
    set:
      containerSecurityContext:
        runAsNonRoot: false
        runAsUser: 185
    asserts:
      - failedTemplate:
          errorPattern: |- # FIXME: |- character can be removed once the Helm Unittest plugin issue is fixed https://github.com/helm-unittest/helm-unittest/issues/499
            `runAsNonRoot` is set to `false` but `runAsUser` is not set to `0` \(root\)

  - it: with container security context runAsNonRoot true, and runAsUser root, then validation fails
    set:
      containerSecurityContext:
        runAsNonRoot: true
        runAsUser: 0
    asserts:
      - failedTemplate:
          errorPattern: |- # FIXME: |- character can be removed once the Helm Unittest plugin issue is fixed https://github.com/helm-unittest/helm-unittest/issues/499
            `runAsNonRoot` is set to `true` but `runAsUser` is set to `0` \(root\)


  - it: with pod scheduling values set
    values:
      - pod-scheduling-values.yaml
    asserts:
      - exists:
          path: spec.template.spec.affinity
      - isSubset:
          path: spec.template.spec.affinity
          content:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - my-app
                  topologyKey: "kubernetes.io/hostname"
      - exists:
          path: spec.template.spec.tolerations
      - contains:
          path: spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: my-key
            operator: Exists

  - it: with default platform service account settings
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_CREATE
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_VALIDATE
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_NAME
            value: ""
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_CREATE
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_VALIDATE
            value: "true"

  - it: with platform service account create disabled
    set:
      hivemqPlatformServiceAccount.create: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_CREATE
            value: "false"

  - it: with platform service account validate disabled
    set:
      hivemqPlatformServiceAccount.validate: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_VALIDATE
            value: "false"

  - it: with platform service account name set
    set:
      hivemqPlatformServiceAccount.name: "my-serviceaccount-name"
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_NAME
            value: "my-serviceaccount-name"

  - it: with platform service account permissions create disabled
    set:
      hivemqPlatformServiceAccount.permissions.create: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_CREATE
            value: "false"

  - it: with platform service account permissions validate disabled
    set:
      hivemqPlatformServiceAccount.permissions.validate: false
    asserts:
      - exists:
          path: spec.template.spec.containers[0]
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SERVICEACCOUNT_PERMISSIONS_VALIDATE
            value: "false"

  - it: with default resource requests
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage

  - it: with custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 1M

  - it: with override resource limits and default resource requests
    set:
      resources.overrideLimits:
        cpu: 2c
        memory: 2m
        ephemeral-storage: 2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 2c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 2M

  - it: with override resource limits and custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
      resources.overrideLimits:
        cpu: 2c
        memory: 2m
        ephemeral-storage: 2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 2c
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 2M

  - it: with empty override resource limits
    set:
      resources.overrideLimits: {}
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi
      - notExists:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
      - notExists:
          path: spec.template.spec.containers[0].resources.limits

  - it: with empty override resource limits and custom resource requests
    set:
      resources.cpu: 1c
      resources.memory: 1m
      resources.ephemeralStorage: 1M
      resources.overrideLimits: {}
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1c
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 1M
      - notExists:
          path: spec.template.spec.containers[0].resources.limits

  - it: with default values, no namespace environment variable is set
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_NAMESPACES

  - it: with custom namespace value set, namespace environment variable is set
    set:
      namespaces: default,cloud-starter
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_NAMESPACES
            value: "default,cloud-starter"

  - it: with default values, no selector environment variable is set
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SELECTOR

  - it: with nil selector value set, no selector environment variable is set
    set:
      selector: nil
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SELECTOR

  - it: with custom selector value set, selector environment variable is set
    set:
      selector: foobar
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SELECTOR
            value: "operator=foobar"

  - it: with custom selectors value set, selector environment variable is set
    set:
      selectors: group=cloud-starter,group=cloud-enterprise
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SELECTOR
            value: "group=cloud-starter,group=cloud-enterprise"

  - it: with default CRD values
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_APPLY
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY_TIMEOUT
            value: "PT10S"

  - it: with custom CRD values
    set:
      crd:
        apply: false
        waitReady: false
        waitTimeout: PT2M
    asserts:
      - exists:
          path: spec.template.spec.containers
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_APPLY
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_CRD_WAIT_UNTIL_READY_TIMEOUT
            value: "PT2M"

  - it: with invalid duration format for CRD wait timeout, then schema validation fails
    set:
      crd:
        waitTimeout: P1S
    asserts:
      - failedTemplate: {}

  - it: with default values, skip HTTPS certificate validation and hostname verification are disabled
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_CERTIFICATE_VALIDATION
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_HOSTNAME_VERIFICATION
            value: "false"

  - it: with skip HTTPS certificate validation
    set:
      https.skipCertificateValidation: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_HOSTNAME_VERIFICATION
            value: "false"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_CERTIFICATE_VALIDATION
            value: "true"

  - it: with skip HTTPS hostname verification
    set:
      https.skipHostnameVerification: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_HOSTNAME_VERIFICATION
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: HIVEMQ_PLATFORM_OPERATOR_SKIP_HTTPS_CERTIFICATE_VALIDATION
            value: "false"
