{
  "$schema" : "https://json-schema.org/draft/2020-12/schema",
  "properties" : {
    "image" : {
      "properties" : {
        "pullPolicy" : {
          "enum" : [
            "IfNotPresent",
            "Never",
            "Always"
          ],
          "type" : "string"
        },
        "repository" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        }
      }
    },
    "config" : {
      "description" : "The configuration fragment.",
      "type" : "string"
    },
    "configCompressed": {
      "description": "Indicates the provided config is zipped and then encoded using base64.",
      "type" : "string"
    },
    "license" : {
      "description" : "License configuration.",
      "enabled" : {
        "type" : "boolean"
      },
      "secret" : {
        "properties" : {
          "secretName" : {
            "description" : "Name of the secret where the license is stored.",
            "type" : "string"
          },
          "secretKey" : {
            "description" : "Name of the key inside the secret which contains the license.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "file" : {
        "description" : "Specify the external file to load as the license.",
        "type" : "string"
      }
    },
    "admin" : {
      "description" : "Configure the admin user/password.",
      "properties" : {
        "user" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "secret" : {
          "properties" : {
            "enabled" : {
              "type" : "boolean"
            },
            "secretName" : {
              "description" : "Name of the secret where the admin credentials are stored.",
              "type" : "string"
            },
            "secretUserKey" : {
              "description" : "Name of the key inside the secret which contains the admin user name.",
              "type" : "string"
            },
            "secretPasswordKey" : {
              "description" : "Name of the key inside the secret which contains the admin password.",
              "type" : "string"
            }
          },
          "type" : "object"
        },
        "file" : {
          "description" : "Specify the external file to load as the license.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "adminLdap" : {
      "description" : "Configure the admin source via LDAP.",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Enable LDAP, will disable user based authentication source."
        },
        "servers" : {
          "description" : "Set of ldap servers used for round robin",
          "items" : {
            "properties" : {
              "host" : {
                "type" : "string",
                "description" : "The hostname or IP address of the LDAP server."
              },
              "port" : {
                "type" : "integer",
                "description" : "The port number of the LDAP server."
              }
            },
            "type" : "object"
          },
          "type" : "array",
          "minItems": 1,
          "maxItems": 3
        },
        "tlsMode" : {
          "description" : "TLS mode for the LDAP connection.",
          "enum" : [
            "NONE",
            "START_TLS",
            "LDAPS"
          ],
          "type" : "string"
        },
        "tls" : {
          "description" : "Configure the TLS truststore for the LDAP connection.",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "type" : "boolean",
              "description" : "Enable or disable TLS for the LDAP connection."
            },
            "truststore" : {
              "description" : "The truststore for interacting with ldap.",
              "type" : "object",
              "properties" : {
                "passwordSecretName" : {
                  "description" : "Name of the secret which contains the password for the keystore.",
                  "type" : "string"
                },
                "passwordSecretKey" : {
                  "description" : "Key inside the secret which contains the password for the keystore.",
                  "type" : "string"
                },
                "truststoreSecretName" : {
                  "description" : "Name of the secret which contains the truststore.",
                  "type" : "string"
                },
                "truststoreSecretKey" : {
                  "description" : "Key inside the secret which contains the truststore.",
                  "type" : "string"
                }
              }
            },
            "create" : {
              "description" : "Create the secret for the truststore and its password.",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "type" : "boolean"
                },
                "password" : {
                  "description" : "Password for the truststore itself.",
                  "type" : "string"
                },
                "file" : {
                  "description" : "The actual truststore, base64 encoded.",
                  "type" : "string"
                }
              }
            }
          }
        },
        "objectClass" : {
          "type" : "string",
          "description" : "The object class to use for user entries."
        },
        "simplebind" : {
          "properties" : {
            "userDn" : {
              "type" : "string",
              "description" : "The distinguished name of the user to bind as."
            },
            "password" : {
              "type" : "string",
              "description" : "The password to use for the bind."
            }
          },
          "type" : "object"
        },
        "uid" : {
          "type" : "string",
          "description" : "The uid to use for the user bind."
        },
        "rdns" : {
          "type" : "string",
          "description" : "The RDNS to use for the user bind."
        },
        "directoryDescent" : {
          "type" : "boolean",
          "description" : "Whether to use directory descent to find the user."
        },
        "maxConnections" : {
          "type" : "integer",
          "description" : "Maximum number of pooled ldap connections."
        },
        "connectionTimeoutMillis" : {
          "type" : "integer",
          "description" : "Timeout for LDAP connection attempts."
        },
        "responseTimeoutMillis" : {
          "type" : "integer",
          "description" : "Timeout for LDAP responses."
        },
        "searchTimeoutSeconds" : {
          "type" : "integer",
          "description" : "Timeout for LDAP searches."
        }
      },
      "type" : "object"
    },
    "pulse" : {
      "description" : "Configure the pulse connection token.",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Enable pulse."
        },
        "token" : {
          "type" : "string",
          "description" : "The pulse connection token."
        },
        "secret" : {
          "properties" : {
            "enabled" : {
              "description" : "Enable wiring pulse token to a provided k8s secret.",
              "type" : "boolean"
            },
            "secretName" : {
              "description" : "Name of the secret where the pulse token is stored.",
              "type" : "string"
            },
            "secretKey" : {
              "description" : "Name of the key inside the secret which contains the token.",
              "type" : "string"
            }
          },
          "type" : "object"
        }
      },
      "type" : "object"
    },
    "preLoginNotice" : {
      "description" : "Pre-login notice configuration for admin UI.",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Enable the pre-login notice."
        },
        "title" : {
          "type" : "string",
          "description" : "Title of the pre-login notice."
        },
        "message" : {
          "type" : "string",
          "description" : "Message content of the pre-login notice."
        },
        "consent" : {
          "type" : "string",
          "description" : "Consent text for the pre-login notice."
        }
      },
      "type" : "object"
    },
    "mqttsn" : {
      "enabled" : {
        "description" : "Enable the mqtt sn listener.",
        "type" : "boolean"
      }
    },
    "mqtt" : {
      "enabled" : {
        "description" : "Enable the unencrypted mqtt listener.",
        "type" : "boolean"
      }
    },
    "http" : {
      "enabled" : {
        "description" : "Enable the unencrypted http listener for the REST API and the UI.",
        "type" : "boolean"
      }
    },
    "mqtts" : {
      "enabled" : {
        "description" : "Enable the TLS protected MQTT endpoint.",
        "type" : "boolean"
      },
      "preferServerCipherSuites" : {
        "description" : "Server cipher suite is preferred over the client one.",
        "type" : "boolean"
      },
      "keystore" : {
        "passwordSecretName" : {
          "description" : "Name of the secret where the keystore password is stored.",
          "type" : "string"
        },
        "passwordSecretKey" : {
          "description" : "Name of the key inside the secret which contains the password for the keystore.",
          "type" : "string"
        },
        "privateKeyPasswordSecretName" : {
          "description" : "Name of the secret where the private key password is stored.",
          "type" : "string"
        },
        "privateKeyPasswordSecretKey" : {
          "description" : "Name of key in the secret where the private key password is stored.",
          "type" : "string"
        }
      },
      "create" : {
        "description" : "Create the secret for the keystore and its passwords.",
        "enabled" : {
          "type" : "boolean"
        },
        "privateKeyPassword" : {
          "description" : "Password for the private key in the keystore.",
          "type" : "object"
        },
        "keystorePassword" : {
          "description" : "Password for the keystore itself.",
          "type" : "object"
        },
        "file" : {
          "description" : "The actual keystore, base64 encoded.",
          "type" : "object"
        }
      }
    },
    "mqttsClientauth" : {
      "clientAuthenticationMode" : {
        "description" : "Select whether client auth is enabled and if it is required.",
        "enum" : [
          "NONE",
          "OPTIONAL",
          "REQUIRED"
        ],
        "type" : "string"
      },
      "truststore" : {
        "passwordSecretName" : {
          "description" : "Name of the secret which contains the password for the keystore.",
          "type" : "string"
        },
        "passwordSecretKey" : {
          "description" : "Key inside the secret which contains the password for the keystore.",
          "type" : "string"
        },
        "truststoreSecretName" : {
          "description" : "Name of the secret which contains the truststore.",
          "type" : "string"
        },
        "truststoreSecretKey" : {
          "description" : "Key inside the secret which contains the truststore.",
          "type" : "string"
        }
      },
      "create" : {
        "description" : "Create the secret for the truststore and its passwords.",
        "enabled" : {
          "type" : "boolean"
        },
        "truststorePassword" : {
          "description" : "Password for the truststore itself.",
          "type" : "string"
        },
        "file" : {
          "description" : "The actual truststore, base64 encoded.",
          "type" : "string"
        }
      }
    },
    "resources" : {
      "properties" : {
        "cpu" : {
          "type" : "string"
        },
        "memory" : {
          "type" : "string"
        }
      }
    },
    "logLevel" : {
      "enum" : [
        "DEBUG",
        "ERROR",
        "FATAL",
        "INFO",
        "TRACE",
        "WARN"
      ],
      "type" : "string"
    },
    "serviceAccountName" : {
      "type" : "string"
    },
    "javaOpts" : {
      "type" : "string"
    },
    "podAnnotations" : {
      "description" : "Annotations to add to the HiveMQ Edge Pod.",
      "type" : "object"
    },
    "podLabels" : {
      "description" : "Labels to add to the HiveMQ Edge Pod.",
      "type" : "object"
    },
    "serviceAnnotations" : {
      "description" : "Annotations to add to the HiveMQ Edge Pod.",
      "type" : "object"
    },
    "serviceLabels" : {
      "description" : "Labels to add to the HiveMQ Edge Pod.",
      "type" : "object"
    },
    "env" : {
      "description" : "Environment variables to be added to the container.",
      "items" : {
        "type" : "object"
      },
      "type" : "array"
    },
    "refresh" : {
      "description" : "Refresh interval for filechecks",
      "type" : "integer"
    },
    "liveness" : {
      "type" : "object",
      "initialDelaySeconds": {
        "type" : "integer"
      }
    },
    "topicFilters" : {
      "description" : "Configure the available topic filters",
      "properties" : {
        "filter" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "schema" : {
          "type" : "string"
        }
      },
      "required" : [
        "filter",
        "schema"
      ],
      "type" : "array"
    },
    "volumes" : {
      "description" : "Additional volumes.",
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "mount" : {
            "type" : "string"
          },
          "definition" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        },
        "required" : [
          "mount",
          "definition"
        ]
      }
    },
    "modules": {
      "properties" : {
        "dataHub": {
          "description" : "Configuration for DataHub.",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "type" : "boolean",
              "description" : "Enable/Disable DataHub."
            },
            "init" : {
              "description" : "Specify the init file to load as for DataHub.",
              "type" : "string"
            },
            "watcher": {
              "description" : "Configuration for the DataHub config reload watcher.",
              "type" : "object",
              "properties" : {
                "waitBeforeDelete" : {
                  "type" : "integer",
                  "description" : "Wait time before deleting in ms."
                },
                "initialDelay" : {
                  "description" : "Initial delay before watcher starts acting in ms.",
                  "type" : "integer"
                },
                "interval" : {
                  "description" : "Watcher interval for checks in ms.",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "persistence" : {
          "description" : "Location of the edge persistence.",
          "mode" : {
            "enum" : [
              "in-memory",
              "file",
              "file-native"
            ],
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "storageClassName" : {
            "description" : "Storage class to be used.",
            "type" : "string"
          },
          "size" : {
            "description" : "Size for the requested claim.",
            "type" : "string"
          }
        }        
      },
      "type": "object"
    },
    "podSecurityContext" : {
      "description" : "Security context for the pod.",
      "type" : "object"
    },
    "containerSecurityContext" : {
      "description" : "Security context for the container.",
      "type" : "object"
    }
  },
  "not": {
    "allOf": [
      { "required": ["config"] },
      { "required": ["configCompressed"] }
    ]
  },
  "type" : "object"
}
