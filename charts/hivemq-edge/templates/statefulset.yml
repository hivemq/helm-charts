apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hivemq-edge.name" (dict "releaseName" .Release.Name) }}
  labels:
      {{- include "hivemq-edge.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "hivemq-edge.selector-labels" . | nindent 6 }}
  serviceName: "hivemq-edge"
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "hivemq-edge.selector-labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 10
      {{- if .Values.serviceAccountName }}
      serviceAccountName: "{{ .Values.serviceAccountName }}"
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8}}
      {{- end }}
      containers:
        - name: hivemq-edge
          image: "{{ .Values.image.repository }}:{{.Values.image.tag}}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12}}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /api/v1/health/liveness
              port: 8080
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: 5
          ports:
            {{- if .Values.http.enabled }}
            - containerPort: 8080
              name: web
            {{- end }}
            {{- if .Values.mqtts.enabled }}
            - containerPort: 8883
              name: mqtts
            {{- else }}
            - containerPort: 1883
              name: mqtt
            {{- end }}
            {{- if .Values.mqttsn.enabled }}
            - containerPort: 2442
              name: mqtt-sn
            {{- end }}
          env:
            - name: HIVEMQ_CONFIG_WRITEABLE
              value: "false"
            - name: HIVEMQ_LOG_LEVEL
              value: "{{ .Values.logLevel }}"
            {{- if .Values.configCompressed }}
            - name: HIVEMQ_CONFIG_FRAGMENT_BASE64ZIP
              value: "true"
            {{- else }}
            - name: HIVEMQ_CONFIG_FRAGMENT_BASE64ZIP
              value: "false"
            {{- end }}
            - name: JAVA_OPTS
              value: "{{ .Values.javaOpts }}"
            - name: HIVEMQ_LICENSE_FOLDER
              value: "/license.edgelic"
            {{- if .Values.pulse.enabled }}
            - name: HIVEMQ_PULSE_TOKEN_FOLDER
              value: "/pulse"
            {{- end }}
            - name: HIVEMQ_DATA_FOLDER
              value: "/persistence"
            - name: HIVEMQ_CONFIG_FOLDER
              value: "/opt/hivemq/conf-k8s"
            - name: HIVEMQ_CONFIG_SECONDARY
              value: "/opt/hivemq/conf-secondary"
            - name: HIVEMQ_CONFIG_REFRESHINTERVAL
              value: "{{ .Values.refresh }}"
            {{- if and .Values.license.enabled .Values.modules.persistence.enabled }}
            - name: HIVEMQ_PERSISTENCE_MODE
              value: "file-native"
            {{- else }}
            - name: HIVEMQ_PERSISTENCE_MODE
              value: "in-memory"
            {{- end }}
            - name: HIVEMQ_DATAHUB_ENABLED
              value: "{{ and .Values.modules.dataHub.enabled .Values.license.enabled }}"
            {{- if and .Values.license.enabled .Values.modules.persistence.enabled .Values.modules.dataHub.enabled }}
            - name: HIVEMQ_DATAHUB_SCRIPTSTATE_PATH
              value: /persistence/scriptstate.db
            - name: HIVEMQ_DATAHUB_WATCHER_INTERVAL
              value: "{{ .Values.modules.dataHub.watcher.interval }}"
            - name: HIVEMQ_DATAHUB_WATCHER_INITIAL_DELAY
              value: "{{ .Values.modules.dataHub.watcher.initialDelay }}"
            - name: HIVEMQ_DATAHUB_WAIT_BEFORE_DELETE
              value: "{{ .Values.modules.dataHub.watcher.waitBeforeDelete }}"
            {{- end }}
            {{- if .Values.mqtt.enabled }}
            - name: HIVEMQ_MQTT_ENABLED
              value: "true"
            {{- end }}
            {{- if and (.Values.mqtts.enabled) (eq .Values.mqtts.create.enabled false) }}
            - name: HIVEMQ_MQTTS_ENABLED
              value: "true"
            - name: HIVEMQ_MQTTS_CLIENT_AUTH_MODE
              value: "{{ .Values.mqttsClientauth.clientAuthenticationMode }}"
            - name: HIVEMQ_MQTTS_PREFER_SERVER_CIPHER_SUITE
              value: "{{ .Values.mqtts.preferServerCipherSuites }}"
            - name: HIVEMQ_MQTTS_KEYSTORE_PATH
              value: /mqtts/{{ .Values.mqtts.keystore.keystoreSecretKey }}
            - name: HIVEMQ_MQTTS_SECRET_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.mqtts.keystore.passwordSecretName }}"
                  key: "{{ .Values.mqtts.keystore.passwordSecretKey }}"
            - name: HIVEMQ_MQTTS_SECRET_PRIVATE_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.mqtts.keystore.privateKeyPasswordSecretName }}"
                  key: "{{ .Values.mqtts.keystore.privateKeyPasswordSecretKey }}"
            {{- end }}
            {{- if and (.Values.mqtts.enabled) (.Values.mqtts.create.enabled) }}
            - name: HIVEMQ_MQTTS_ENABLED
              value: "true"
            - name: HIVEMQ_MQTTS_CLIENT_AUTH_MODE
              value: "{{ .Values.mqttsClientauth.clientAuthenticationMode }}"
            - name: HIVEMQ_MQTTS_PREFER_SERVER_CIPHER_SUITE
              value: "{{ .Values.mqtts.preferServerCipherSuites }}"
            - name: HIVEMQ_MQTTS_KEYSTORE_PATH
              value: /mqtts/keystore.jks
            - name: HIVEMQ_MQTTS_SECRET_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "mqtts" "releaseName" .Release.Name) }}"
                  key: keystore-password
            - name: HIVEMQ_MQTTS_SECRET_PRIVATE_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "mqtts" "releaseName" .Release.Name) }}"
                  key: secret-key-password
            {{- end }}
            {{- if and (ne .Values.mqttsClientauth.clientAuthenticationMode "NONE") (ne .Values.mqttsClientauth.create.enabled true) }}
            - name: HIVEMQ_MQTTS_TRUSTSTORE_PATH
              value: /mqtts-trust/{{ .Values.mqttsClientauth.truststore.truststoreSecretKey }}
            - name: HIVEMQ_MQTTS_SECRET_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.mqttsClientauth.truststore.passwordSecretName }}"
                  key: "{{ .Values.mqttsClientauth.truststore.passwordSecretKey }}"
            {{- end }}
            {{- if and (ne .Values.mqttsClientauth.clientAuthenticationMode "NONE") (.Values.mqttsClientauth.create.enabled) }}
            - name: HIVEMQ_MQTTS_TRUSTSTORE_PATH
              value: /mqtts-trust/truststore.jks
            - name: HIVEMQ_MQTTS_SECRET_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "clientauth" "releaseName" .Release.Name) }}"
                  key: truststore-password
            {{- end }}
            {{- if and (.Values.adminLdap.tls.enabled) (ne .Values.adminLdap.tls.create.enabled true) }}
            - name: HIVEMQ_LDAP_TRUSTSTORE_PATH
              value: /ldap-trust/{{ .Values.adminLdap.tls.truststore.truststoreSecretKey }}
            - name: HIVEMQ_LDAP_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.adminLdap.tls.truststore.passwordSecretName }}"
                  key: "{{ .Values.adminLdap.tls.truststore.passwordSecretKey }}"
            {{- end }}
            {{- if and (.Values.adminLdap.tls.enabled) (.Values.adminLdap.tls.create.enabled) }}
            - name: HIVEMQ_LDAP_TRUSTSTORE_PATH
              value: /ldap-trust/truststore.jks
            - name: HIVEMQ_LDAP_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "ldap" "releaseName" .Release.Name) }}"
                  key: truststore-password
            {{- end }}
            {{- if .Values.adminLdap.enabled }}
            - name: HIVEMQ_LDAP_ENABLED
              value: "true"
            - name: HIVEMQ_LDAP_TLS_MODE
              value: "{{ .Values.adminLdap.tlsMode }}"
            - name: HIVEMQ_LDAP_SIMPLEBIND_RDNS
              value: "{{ .Values.adminLdap.simplebind.userDn }}"
            - name: HIVEMQ_LDAP_SIMPLEBIND_PASSWORD
              value: "{{ .Values.adminLdap.simplebind.password }}"
            - name: HIVEMQ_LDAP_UID
              value: "{{ .Values.adminLdap.uid }}"
            - name: HIVEMQ_LDAP_RDNS
              value: "{{ .Values.adminLdap.rdns }}"
            - name: HIVEMQ_LDAP_DIRECTORY_DESCENT
              value: "{{ .Values.adminLdap.directoryDescent }}"
            - name: HIVEMQ_LDAP_MAX_CONNECTION
              value: "{{ .Values.adminLdap.maxConnections }}"
            - name: HIVEMQ_LDAP_CONNECT_TIMEOUT_MS
              value: "{{ .Values.adminLdap.connectionTimeoutMillis }}"
            - name: HIVEMQ_LDAP_RESPONSE_TIMEOUT_MS
              value: "{{ .Values.adminLdap.responseTimeoutMillis }}"
            - name: HIVEMQ_LDAP_SEARCH_TIMEOUT_S
              value: "{{ .Values.adminLdap.searchTimeoutSeconds }}"
              {{- if and (hasKey .Values.adminLdap "objectClass") .Values.adminLdap.objectClass }}
            - name: HIVEMQ_LDAP_OBJECT_CLASS_ENABLED
              value: "true"
            - name: HIVEMQ_LDAP_OBJECT_CLASS
              value: "{{ .Values.adminLdap.objectClass }}"
              {{- end }}
            - name: HIVEMQ_LDAP_SERVER1_HOST
              value: "{{ (index .Values.adminLdap.servers 0).host }}"
            - name: HIVEMQ_LDAP_SERVER1_PORT
              value: "{{ (index .Values.adminLdap.servers 0).port }}"
              {{- if ge (len .Values.adminLdap.servers) 2 }}
            - name: HIVEMQ_LDAP_SERVER2_HOST
              value: "{{ (index .Values.adminLdap.servers 1).host }}"
            - name: HIVEMQ_LDAP_SERVER2_PORT
              value: "{{ (index .Values.adminLdap.servers 1).port }}"
              {{- end }}
              {{- if ge (len .Values.adminLdap.servers) 3 }}
            - name: HIVEMQ_LDAP_SERVER3_HOST
              value: "{{ (index .Values.adminLdap.servers 2).host }}"
            - name: HIVEMQ_LDAP_SERVER3_PORT
              value: "{{ (index .Values.adminLdap.servers 2).port }}"
              {{- end }}
            {{- else }}
            - name: HIVEMQ_USERS_ENABLED
              value: "true"
              {{- if .Values.admin.secret.enabled }}
            - name: HIVEMQ_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.admin.secret.secretName }}"
                  key: "{{ .Values.admin.secret.secretUserKey }}"
            - name: HIVEMQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.admin.secret.secretName }}"
                  key: "{{ .Values.admin.secret.secretPasswordKey }}"
              {{- else }}
            {{- $secretName := include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "admin" "releaseName" .Release.Name) }}
            - name: HIVEMQ_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ $secretName }}"
                  key: user
            - name: HIVEMQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ $secretName }}"
                  key: password
              {{- end }}
            {{- end }}
            {{- if .Values.preLoginNotice.enabled }}
            - name: HIVEMQ_PRE_LOGIN_NOTICE_ENABLED
              value: "{{ .Values.preLoginNotice.enabled }}"
            {{- if .Values.preLoginNotice.title }}
            - name: HIVEMQ_PRE_LOGIN_NOTICE_TITLE
              value: "{{ .Values.preLoginNotice.title }}"
            {{- end }}
            {{- if .Values.preLoginNotice.message }}
            - name: HIVEMQ_PRE_LOGIN_NOTICE_MESSAGE
              value: "{{ .Values.preLoginNotice.message }}"
            {{- end }}
            {{- if .Values.preLoginNotice.consent }}
            - name: HIVEMQ_PRE_LOGIN_NOTICE_CONSENT
              value: "{{ .Values.preLoginNotice.consent }}"
            {{- end }}
            {{- end }}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            limits:
              memory: "{{ .Values.resources.memory }}"
              cpu: "{{ .Values.resources.cpu }}"
            requests:
              memory: "{{ .Values.resources.memory }}"
              cpu: "{{ .Values.resources.cpu }}"
          volumeMounts:
          - name: fragment
            mountPath: /fragment
          - name: topicfilters
            mountPath: /opt/hivemq/conf-secondary
          {{- if  and .Values.modules.dataHub.enabled .Values.license.enabled }}
          - name: datahubinit
            mountPath: /datahubinit
          {{- end }}
          {{- if and .Values.modules.persistence.enabled .Values.license.enabled }}
          - name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "persistence" "releaseName" .Release.Name) }}
            mountPath: /persistence
          {{- end }}
          {{- range .Values.volumes }}
          {{- with (index .definition 0) }}
          - name: {{ .name }}
          {{- end }}
            mountPath: {{ .mount }}
          {{- end }}
          {{- if .Values.mqtts.enabled }}
          - mountPath: /mqtts
            name: mqtts-jks
          {{- end }}
          {{- if ne .Values.mqttsClientauth.clientAuthenticationMode "NONE" }}
          - mountPath: /mqtts-trust
            name: mqtts-truststore-jks
          {{- end }}
          {{- if .Values.adminLdap.tls.enabled }}
          - mountPath: /ldap-trust
            name: ldap-truststore-jks
          {{- end }}
          {{- if .Values.license.enabled }}
          - mountPath: /license.edgelic
            name: license
          {{- end }}
          {{- if .Values.pulse.enabled }}
          - mountPath: /pulse
            name: pulse
          {{- end }}
      {{- with .Values.podScheduling.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podScheduling.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: fragment
          configMap:
            name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "config" "releaseName" .Release.Name) }}
        - name: topicfilters
          configMap:
            name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "topicfilters" "releaseName" .Release.Name) }}
      {{- if  and .Values.modules.dataHub.enabled .Values.license.enabled }}
        - name: datahubinit
          configMap:
            name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "datahub" "releaseName" .Release.Name) }}
      {{- end }}
      {{- range .Values.volumes }}
        {{- toYaml .definition | nindent 8 }}
      {{- end }}
      {{- if and (.Values.mqtts.enabled) (eq .Values.mqtts.create.enabled false) }}
        - name: mqtts-jks
          secret:
            secretName: "{{ .Values.mqtts.keystore.keystoreSecretName }}"
            items:
              - key: "{{ .Values.mqtts.keystore.keystoreSecretKey }}"
                path: "{{ .Values.mqtts.keystore.keystoreSecretKey }}"
      {{- end -}}
      {{- if and (.Values.mqtts.enabled) (.Values.mqtts.create.enabled) }}
        - name: mqtts-jks
          secret:
            secretName: "{{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "mqtts" "releaseName" .Release.Name) }}"
            items:
              - key: keystore.jks
                path: keystore.jks
      {{- end -}}
      {{- if and (ne .Values.mqttsClientauth.clientAuthenticationMode "NONE") (ne .Values.mqttsClientauth.create.enabled true) }}
        - name: mqtts-truststore-jks
          secret:
            secretName: "{{ .Values.mqttsClientauth.truststore.truststoreSecretName }}"
            items:
              - key: "{{ .Values.mqttsClientauth.truststore.truststoreSecretKey }}"
                path: "{{ .Values.mqttsClientauth.truststore.truststoreSecretKey }}"
      {{- end -}}
      {{- if and (ne .Values.mqttsClientauth.clientAuthenticationMode "NONE") (.Values.mqttsClientauth.create.enabled) }}
        - name: mqtts-truststore-jks
          secret:
            secretName: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "clientauth" "releaseName" .Release.Name) }}
            items:
              - key: truststore.jks
                path: truststore.jks
      {{- end -}}
      {{- if and (.Values.adminLdap.tls.enabled) (ne .Values.adminLdap.tls.create.enabled true) }}
        - name: ldap-truststore-jks
          secret:
            secretName: "{{ .Values.adminLdap.tls.truststore.truststoreSecretName }}"
            items:
              - key: "{{ .Values.adminLdap.tls.truststore.truststoreSecretKey }}"
                path: "{{ .Values.adminLdap.tls.truststore.truststoreSecretKey }}"
      {{- end -}}
      {{- if and (.Values.adminLdap.tls.enabled) (.Values.adminLdap.tls.create.enabled) }}
        - name: ldap-truststore-jks
          secret:
            secretName: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "ldap" "releaseName" .Release.Name) }}
            items:
              - key: truststore.jks
                path: truststore.jks
      {{- end -}}
      {{- if and .Values.license.enabled .Values.license.secret }}
        - name: license
          secret:
            secretName: "{{ .Values.license.secret.secretName }}"
            items:
              - key: "{{ .Values.license.secret.secretKey }}"
                path: "{{ .Values.license.secret.secretKey }}"
      {{- end -}}
      {{- if and (.Values.license.enabled) (.Values.license.file) }}
        - name: license
          secret:
            secretName: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "license" "releaseName" .Release.Name) }}
            items:
              - key: license.edgelic
                path: license.edgelic
      {{- end }}
      {{- if and .Values.pulse.enabled .Values.pulse.secret.enabled }}
        - name: pulse
          secret:
            secretName: "{{ .Values.pulse.secret.secretName }}"
            items:
              - key: "{{ .Values.pulse.secret.secretKey }}"
                path: "{{ .Values.pulse.secret.secretKey }}"
      {{- end -}}
      {{- if and (.Values.pulse.enabled) (.Values.pulse.token) }}
        - name: pulse
          secret:
            secretName: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "pulse" "releaseName" .Release.Name) }}
            items:
              - key: tokenbase64.jwt
                path: tokenbase64.jwt
      {{- end }}
  {{- if and .Values.modules.persistence.enabled .Values.license.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "persistence" "releaseName" .Release.Name) }}
      labels:
        app.kubernetes.io/name: {{ include "hivemq-edge.name" (dict "prefix" "hivemq-edge" "name" "persistence" "releaseName" .Release.Name) }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{.Values.modules.persistence.storageClassName }}"
      resources:
        requests:
          storage: "{{.Values.modules.persistence.size }}"
  {{- end }}
