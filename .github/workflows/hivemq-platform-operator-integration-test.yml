name: HiveMQ Platform Operator Integration Tests
on:
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
concurrency:
  group: hivemq-operator-platform-integration-test-${{ github.ref }}
  cancel-in-progress: true
env:
  check-prefix: 'Platform Test #'
  split-total: 23
jobs:
  split-indexes:
    runs-on: ubuntu-latest
    name: Generate split indexes
    outputs:
      json: ${{ steps.generate-index-list.outputs.json }}
    steps:
      - id: generate-index-list
        run: |
          MAX_INDEX=$((${{ env.split-total }}-1))
          INDEX_LIST=$(seq 0 ${MAX_INDEX})
          INDEX_JSON=$(jq --null-input --compact-output '. |= [inputs]' <<< ${INDEX_LIST})
          echo "json=${INDEX_JSON}" >> "$GITHUB_OUTPUT"

  platform-integration-test:
    name: "Platform Test #${{ matrix.split-index }} (${{ matrix.k8s-version-type }})"
    runs-on: ubuntu-latest
    needs:
      - split-indexes
    timeout-minutes: 25
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        split-index: ${{ fromjson(needs.split-indexes.outputs.json) }}
        k8s-version-type: [
          MINIMUM,
          LATEST
        ]
    steps:
      - name: Checkout HiveMQ Helm Charts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: helm-charts

      - name: Checkout HiveMQ Platform Operator
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: hivemq/hivemq-platform-operator
          token: ${{ secrets.JENKINS_GITHUB_TOKEN }}
          path: hivemq-platform-operator

      - name: Checkout HiveMQ Platform Operator on the same or target branch
        working-directory: hivemq-platform-operator
        run: |
          echo "Checking if branch \"${GITHUB_HEAD_REF}\" exists on hivemq-platform-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_HEAD_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out branch with the same name"
            git fetch --all
            git checkout origin/${GITHUB_HEAD_REF}
            exit
          fi
          if [[ "${GITHUB_BASE_REF}" == "develop" ]]; then
            exit
          fi
          echo "Checking if branch \"${GITHUB_BASE_REF}\" exists on hivemq-platform-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_BASE_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out target branch"
            git fetch --all
            git checkout origin/${GITHUB_BASE_REF}
          fi

      - name: Checkout JUnit reports
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: junit-reports
          ref: junit-reports/platform/${{ github.base_ref }}
        continue-on-error: true

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3

      - name: Login to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@94baf225fe0a508e581a564467443d0e2379123b # v4
        with:
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Set Up Split tests
        run: |
          curl -L --output split-tests-java.jar https://github.com/Donnerbart/split-tests-java/releases/download/0.1.8/split-tests-java.jar

      - name: Split tests
        id: split-tests
        run: |
          TEST_SUITE=$(java -jar split-tests-java.jar --split-index ${{ matrix.split-index }} --split-total ${{ env.split-total }} --glob '**/helm-charts/tests-hivemq-platform-operator/**/*IT.java' --junit-glob '**/junit-reports/*.xml' --debug)
          echo "test-suite=$TEST_SUITE" >> "$GITHUB_OUTPUT"

      - name: Run HiveMQ Platform Operator integration tests
        working-directory: helm-charts
        env:
          K8S_VERSION_TYPE: ${{ matrix.k8s-version-type }}
        run: |
          echo "This runner will execute the following tests: ${{ steps.split-tests.outputs.test-suite }}"
          # split the FQCN list into separate --tests arguments
          TEST_COMMAND="./gradlew :tests-hivemq-platform-operator:integrationTest"
          for TEST in ${{ steps.split-tests.outputs.test-suite }}; do
            TEST_COMMAND="$TEST_COMMAND --tests $TEST"
          done
          echo "$TEST_COMMAND"
          eval $TEST_COMMAND

      - name: Upload HiveMQ Platform Operator test results
        if: always()
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: "Test results HiveMQ Platform Operator #${{ matrix.split-index }} (${{ matrix.k8s-version-type }})"
          path: |
            helm-charts/tests-hivemq-platform-operator/build/reports/tests/integrationTest/
            helm-charts/tests-hivemq-platform-operator/build/test-results/integrationTest/*.xml
          retention-days: 5

      - name: Upload JUnit report artifact
        if: ${{ matrix.k8s-version-type == 'LATEST' }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: junit-xml-reports-${{ matrix.split-index }}
          path: |
            helm-charts/tests-hivemq-platform-operator/build/test-results/integrationTest/*.xml

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@ee6b445351cd81e2f73a16a0e52d598aeac2197f # v5
        with:
          annotate_only: true
          detailed_summary: true
          job_name: platform-integration-test-report
          report_paths: '**/build/test-results/integrationTest/TEST-*.xml'

  merge-junit-reports:
    runs-on: ubuntu-latest
    name: "Merge JUnit reports"
    needs:
      - platform-integration-test
    permissions:
      contents: write
    steps:
      - name: Set up xmlstarlet
        run: sudo apt update && sudo apt install -y xmlstarlet

      - name: Checkout JUnit reports
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: junit-reports
          ref: junit-reports/platform/${{ github.base_ref }}
        continue-on-error: true

      - name: Merge JUnit report artifacts
        uses: actions/upload-artifact/merge@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: junit-xml-reports-${{ github.base_ref }}
          pattern: junit-xml-reports-*
          delete-merged: true

      - name: Download JUnit reports artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: junit-xml-reports-${{ github.base_ref }}
          path: junit-reports-artifact

      - name: Clean up JUnit reports
        working-directory: junit-reports-artifact
        run: |
          echo -n "Before: "
          du -sch *.xml | tail -n 1 | cut -f1
          for REPORT in *.xml; do
            xmlstarlet ed -d '//system-out' -d '//system-err' "$REPORT" > tmp-report.xml && mv tmp-report.xml "$REPORT"
          done
          echo -n "After: "
          du -sch *.xml | tail -n 1 | cut -f1

      - name: Remove old JUnit reports
        working-directory: junit-reports
        run: git rm *.xml || true

      - name: Copy new JUnit reports
        run: cp junit-reports-artifact/*.xml junit-reports/

      - name: Update JUnit reports
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9
        with:
          message: 'Update JUnit reports'
          add: '*.xml'
          cwd: junit-reports
