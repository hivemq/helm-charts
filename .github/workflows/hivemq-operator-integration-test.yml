name: HiveMQ Legacy Operator Integration Tests
on:
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
concurrency:
  group: hivemq-operator-legacy-integration-test-${{ github.ref }}
  cancel-in-progress: true
env:
  check-prefix: "Legacy Test #"
  split-total: 6
jobs:
  generate-split-index-json:
    name: Generate split indexes
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.generate.outputs.split-index-json }}
    steps:
      - name: Generate split index list
        id: generate
        uses: donnerbart/split-tests-java-action/generate-split-index-json@a520fabe5640fc1d64ed28df590c7014b1a2c03d # v1
        with:
          split-total: ${{ env.split-total }}

  compile-integration-test:
    name: Compile integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout HiveMQ Helm Charts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: helm-charts

      - name: Checkout HiveMQ Legacy Operator on the default branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: hivemq/hivemq-operator
          token: ${{ secrets.JENKINS_GITHUB_TOKEN }}
          path: hivemq-operator

      - name: Checkout HiveMQ Legacy Operator on the same or target branch
        working-directory: ${{ github.workspace }}/hivemq-operator
        run: |
          echo "Checking if branch \"${GITHUB_HEAD_REF}\" exists on hivemq-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_HEAD_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out branch with the same name"
            git fetch --all
            git checkout origin/${GITHUB_HEAD_REF}
            exit
          fi
          if [[ "${GITHUB_BASE_REF}" == "master" ]]; then
            exit
          fi
          echo "Checking if branch \"${GITHUB_BASE_REF}\" exists on hivemq-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_BASE_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out target branch"
            git fetch --all
            git checkout origin/${GITHUB_BASE_REF}
          fi

      - name: Set up JDK 21
        id: setup-java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
        with:
          cache: gradle
          distribution: temurin
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4

      - name: Warmup Gradle cache
        if: ${{ steps.setup-java.outputs.cache-hit == 'false' }}
        working-directory: helm-charts
        run: ./gradlew :tests-hivemq-operator:integrationTestPrepare

  legacy-integration-test:
    name: "Legacy Test #${{ matrix.split-index }} (${{ matrix.k8s-version-type }})"
    runs-on: ubuntu-latest
    needs:
      - generate-split-index-json
      - compile-integration-test
    timeout-minutes: 25
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        split-index: ${{ fromjson(needs.generate-split-index-json.outputs.json) }}
        k8s-version-type: [
          MINIMUM,
          LATEST
        ]
    steps:
      - name: Checkout HiveMQ Helm Charts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: helm-charts

      - name: Checkout HiveMQ Legacy Operator on the default branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: hivemq/hivemq-operator
          token: ${{ secrets.JENKINS_GITHUB_TOKEN }}
          path: hivemq-operator

      - name: Checkout HiveMQ Legacy Operator on the same or target branch
        working-directory: ${{ github.workspace }}/hivemq-operator
        run: |
          echo "Checking if branch \"${GITHUB_HEAD_REF}\" exists on hivemq-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_HEAD_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out branch with the same name"
            git fetch --all
            git checkout origin/${GITHUB_HEAD_REF}
            exit
          fi
          if [[ "${GITHUB_BASE_REF}" == "master" ]]; then
            exit
          fi
          echo "Checking if branch \"${GITHUB_BASE_REF}\" exists on hivemq-operator"
          BRANCH=$(git ls-remote origin ${GITHUB_BASE_REF})
          if [[ -n "${BRANCH}" ]]; then 
            echo "Checking out target branch"
            git fetch --all
            git checkout origin/${GITHUB_BASE_REF}
          fi

      - name: Checkout JUnit reports
        uses: donnerbart/split-tests-java-action/checkout-junit-reports@a520fabe5640fc1d64ed28df590c7014b1a2c03d # v1
        with:
          split-index: ${{ matrix.split-index }}
          git-branch: junit-reports/legacy/${{ github.base_ref }}
          path: junit-reports
          upload-artifact: ${{ matrix.k8s-version-type == 'LATEST' }}

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Login to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
        with:
          cache: gradle
          distribution: temurin
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4

      - name: Compile integration tests
        working-directory: helm-charts
        run: ./gradlew :tests-hivemq-operator:integrationTestPrepare

      - name: Split tests
        id: split-tests
        uses: donnerbart/split-tests-java-action@a520fabe5640fc1d64ed28df590c7014b1a2c03d # v1
        with:
          split-index: ${{ matrix.split-index }}
          split-total: ${{ env.split-total }}
          glob: '**/helm-charts/tests-hivemq-operator/**/*IT.java'
          junit-glob: '**/junit-reports/*.xml'
          format: 'gradle'
          new-test-time: 'average'
          calculate-optimal-total-split: true
          debug: true

      - name: Run HiveMQ Legacy Operator integration tests
        working-directory: helm-charts
        env:
          K8S_VERSION_TYPE: ${{ matrix.k8s-version-type }}
        run: ./gradlew :tests-hivemq-operator:integrationTest ${{ steps.split-tests.outputs.test-suite }}

      - name: Upload HiveMQ Legacy Operator test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: "Test results HiveMQ Legacy Operator #${{ matrix.split-index }} (${{ matrix.k8s-version-type }})"
          path: |
            helm-charts/tests-hivemq-operator/build/reports/tests/integrationTest/
            helm-charts/tests-hivemq-operator/build/test-results/integrationTest/*.xml
          retention-days: 5

      - name: Upload JUnit report artifact
        if: ${{ matrix.k8s-version-type == 'LATEST' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: junit-xml-reports-${{ matrix.split-index }}
          path: |
            helm-charts/tests-hivemq-operator/build/test-results/integrationTest/*.xml

      - name: Publish test report
        if: ${{ !cancelled() }}
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
        with:
          name: Legacy Integration tests report
          path: '**/build/test-results/integrationTest/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false
          working-directory: helm-charts

      - name: Install xmllint
        if: failure()
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Set annotations for failed tests
        if: failure()
        run: |
          find helm-charts/tests-hivemq-operator/build/test-results/integrationTest -type f -name "*.xml" | while read -r FILE; do
            COUNT=$(xmllint --xpath 'count(//testcase[failure or error])' "$FILE")
            for INDEX in $(seq 1 "$COUNT"); do
              TEST_CLASS=$(xmllint --xpath "string((//testcase[failure or error])[$INDEX]/@classname)" "$FILE" 2>/dev/null)
              TEST_METHOD=$(xmllint --xpath "string((//testcase[failure or error])[$INDEX]/@name)" "$FILE" 2>/dev/null)
              MESSAGE=$(xmllint --xpath "string((//testcase[failure or error])[$INDEX]/failure/@message | (//testcase[failure or error])[$INDEX]/error/@message)" "$FILE" 2>/dev/null)
              [ -z "$MESSAGE" ] && MESSAGE="Test failed"
              echo "::error title=Test #${{ matrix.split-index }}::$TEST_CLASS.$TEST_METHOD%0A$MESSAGE"
            done
          done

  merge-junit-reports:
    name: Merge JUnit reports
    runs-on: ubuntu-latest
    needs:
      - legacy-integration-test
    permissions:
      contents: write
    steps:
      - name: Merge JUnit reports
        uses: donnerbart/split-tests-java-action/merge-junit-reports@a520fabe5640fc1d64ed28df590c7014b1a2c03d # v1
        with:
          git-branch: junit-reports/legacy/${{ github.base_ref }}
          artifact-name: junit-xml-reports-${{ github.base_ref }}
          split-artifact-pattern: junit-xml-reports-*
