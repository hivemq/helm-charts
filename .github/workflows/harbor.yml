name: Publish HiveMQ Platform Operator Helm chart to Harbor
on:
  push:
    branches:
      - master
      - next-operator-release
    paths:
      - charts/hivemq-platform-operator/**
env:
  operator_chart_name: helm-charts/hivemq-platform-operator
jobs:
  platform-operator-chart:
    name: Platform Operator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout HiveMQ Helm Charts
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4

      - name: Login to Harbor
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ${{ secrets.HARBOR_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_ROBOT_ACCOUNT_API_USER }}
          password: ${{ secrets.HARBOR_ROBOT_ACCOUNT_API_TOKEN }}

      - name: Setup dev Harbor environment
        if: ${{ github.ref_name != 'master' }}
        run: |
          echo "HARBOR_DEV_URL=${{ secrets.HARBOR_REGISTRY_URL }}/dev" >> $GITHUB_ENV
          echo "HARBOR_PROJECT=dev" >> $GITHUB_ENV
          echo "operator_chart_name=hivemq/$operator_chart_name" >> $GITHUB_ENV

      - name: Publish HiveMQ Platform Operator Helm chart
        id: push-chart
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          chart_name="hivemq-platform-operator"
          chart_dir="charts/$chart_name"
          chart_version=$(grep '^version:' "$chart_dir/Chart.yaml" | awk '{print $2}')
          harbor_url="${HARBOR_DEV_URL:-${{ secrets.HARBOR_REGISTRY_URL }}}"

          publish_version="$chart_version"
          # check if snapshot suffix is needed for the Chart version based on the branch
          if [[ "$BRANCH" != "master" && "$chart_version" != *"-snapshot" ]]; then
            # increment patch version and add -snapshot suffix: 0.2.32 -> 0.2.33-snapshot
            IFS='.' read -r major minor patch <<< "$chart_version"
            patch=$((patch + 1))
            publish_version="${major}.${minor}.${patch}-snapshot"
            sed -i "s/^version: .*/version: $publish_version/" "$chart_dir/Chart.yaml"
            echo "Updated $chart_dir/Chart.yaml to snapshot version $publish_version"
          fi

          echo "--------------------------------------------------"
          echo "🔎 Checking chart: $chart_dir version: $publish_version"

          chart_url="oci://$harbor_url/hivemq/helm-charts/$chart_name"

          # skip publishing and signing if this chart is a release version (not a snapshot) and the same version already exists in the registry
          if [[ "$publish_version" != *"-snapshot" ]] && helm show chart "$chart_url" --version "$publish_version" > /dev/null 2>&1; then
            echo "⏭️ Skipping: Chart version $chart_version already exists."
            echo "sign_chart=false" >> $GITHUB_ENV
          else
            helm package "$chart_dir" --destination .
            chart_archive="${chart_name}-${publish_version}.tgz"
            reproducible_chart_archive="${chart_name}-${publish_version}-reproducible.tgz"
            bash ./scripts/create-reproducible-chart.sh "$PWD/$chart_archive" "$PWD/$reproducible_chart_archive"
            helm push "$reproducible_chart_archive" "oci://$harbor_url/hivemq/helm-charts"
            echo "🎉 Successfully published $reproducible_chart_archive"
            rm "$chart_archive" "$reproducible_chart_archive"
            echo "sign_chart=true" >> $GITHUB_ENV
            echo "sign_chart_version=$publish_version" >> $GITHUB_ENV
          fi

      - name: Install Sigstore
        if: ${{ env.sign_chart == 'true' }}
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Sign HiveMQ Platform Operator Helm chart
        if: ${{ env.sign_chart == 'true' }}
        env:
          CHART_NAME: ${{ env.operator_chart_name }}
          CHART_VERSION: ${{ env.sign_chart_version }}
          HARBOR_REGISTRY_URL: ${{ secrets.HARBOR_REGISTRY_URL }}
          HARBOR_API_USER: ${{ secrets.HARBOR_ROBOT_ACCOUNT_API_USER }}
          HARBOR_API_TOKEN: ${{ secrets.HARBOR_ROBOT_ACCOUNT_API_TOKEN }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: bash ./scripts/sign-harbor-chart.sh "$CHART_NAME" "$CHART_VERSION"
